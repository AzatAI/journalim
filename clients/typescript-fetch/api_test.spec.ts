/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AttachmentApi", () => {
  let instance: api.AttachmentApi
  beforeEach(function() {
    instance = new api.AttachmentApi(config)
  });

  test("createAttachmentAttachmentsPost", () => {
    const body: api.AttachmentCreate = undefined
    return expect(instance.createAttachmentAttachmentsPost(body, {})).resolves.toBe(null)
  })
  test("deleteAttachmentAttachmentsAttachmentIdDelete", () => {
    const attachmentId: number = 56
    return expect(instance.deleteAttachmentAttachmentsAttachmentIdDelete(attachmentId, {})).resolves.toBe(null)
  })
  test("readAttachmentAttachmentsAttachmentIdGet", () => {
    const attachmentId: number = 56
    return expect(instance.readAttachmentAttachmentsAttachmentIdGet(attachmentId, {})).resolves.toBe(null)
  })
  test("readAttachmentsAttachmentsGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readAttachmentsAttachmentsGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateAttachmentAttachmentsAttachmentIdPatch", () => {
    const body: api.AttachmentUpdate = undefined
    const attachmentId: number = 56
    return expect(instance.updateAttachmentAttachmentsAttachmentIdPatch(body, attachmentId, {})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("pingPingGet", () => {
    return expect(instance.pingPingGet({})).resolves.toBe(null)
  })
})

describe("IssueApi", () => {
  let instance: api.IssueApi
  beforeEach(function() {
    instance = new api.IssueApi(config)
  });

  test("createIssueIssuesPost", () => {
    const body: api.IssueCreate = undefined
    return expect(instance.createIssueIssuesPost(body, {})).resolves.toBe(null)
  })
  test("createIssueLanguageIssueLanguagesPost", () => {
    const body: api.IssueLanguageCreate = undefined
    return expect(instance.createIssueLanguageIssueLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("deleteIssueIssuesIssueIdDelete", () => {
    const issueId: number = 56
    return expect(instance.deleteIssueIssuesIssueIdDelete(issueId, {})).resolves.toBe(null)
  })
  test("deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete", () => {
    const issueLanguageId: number = 56
    return expect(instance.deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId, {})).resolves.toBe(null)
  })
  test("readIssueIssuesIssueIdGet", () => {
    const issueId: number = 56
    return expect(instance.readIssueIssuesIssueIdGet(issueId, {})).resolves.toBe(null)
  })
  test("readIssueLanguageIssueLanguagesIssueLanguageIdGet", () => {
    const issueLanguageId: number = 56
    return expect(instance.readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId, {})).resolves.toBe(null)
  })
  test("readIssueLanguagesIssueLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readIssueLanguagesIssueLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("readIssuesIssuesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readIssuesIssuesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateIssueIssuesIssueIdPatch", () => {
    const body: api.IssueUpdate = undefined
    const issueId: number = 56
    return expect(instance.updateIssueIssuesIssueIdPatch(body, issueId, {})).resolves.toBe(null)
  })
  test("updateIssueLanguageIssueLanguagesIssueLanguageIdPatch", () => {
    const body: api.IssueLanguageUpdate = undefined
    const issueLanguageId: number = 56
    return expect(instance.updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId, {})).resolves.toBe(null)
  })
})

describe("LanguageApi", () => {
  let instance: api.LanguageApi
  beforeEach(function() {
    instance = new api.LanguageApi(config)
  });

  test("createLanguageLanguagesPost", () => {
    const body: api.LanguageCreate = undefined
    return expect(instance.createLanguageLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("deleteLanguageLanguagesLanguageIdDelete", () => {
    const languageId: number = 56
    return expect(instance.deleteLanguageLanguagesLanguageIdDelete(languageId, {})).resolves.toBe(null)
  })
  test("readLanguageLanguagesLanguageIdGet", () => {
    const languageId: number = 56
    return expect(instance.readLanguageLanguagesLanguageIdGet(languageId, {})).resolves.toBe(null)
  })
  test("readLanguagesLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readLanguagesLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateLanguageLanguagesLanguageIdPatch", () => {
    const body: api.LanguageUpdate = undefined
    const languageId: number = 56
    return expect(instance.updateLanguageLanguagesLanguageIdPatch(body, languageId, {})).resolves.toBe(null)
  })
})

describe("MediaApi", () => {
  let instance: api.MediaApi
  beforeEach(function() {
    instance = new api.MediaApi(config)
  });

  test("createUploadUploadPost", () => {
    const file: Blob = "file_example"
    const _public: boolean = true
    return expect(instance.createUploadUploadPost(file, _public, {})).resolves.toBe(null)
  })
  test("deleteMediaMediasMediaIdDelete", () => {
    const mediaId: number = 56
    return expect(instance.deleteMediaMediasMediaIdDelete(mediaId, {})).resolves.toBe(null)
  })
  test("readMediaMediasMediaIdGet", () => {
    const mediaId: number = 56
    return expect(instance.readMediaMediasMediaIdGet(mediaId, {})).resolves.toBe(null)
  })
  test("readMediasMediasGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readMediasMediasGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateMediaMediasMediaIdPatch", () => {
    const body: api.MediaUpdate = undefined
    const mediaId: number = 56
    return expect(instance.updateMediaMediasMediaIdPatch(body, mediaId, {})).resolves.toBe(null)
  })
})

describe("PageApi", () => {
  let instance: api.PageApi
  beforeEach(function() {
    instance = new api.PageApi(config)
  });

  test("createPageLanguagePageLanguagesPost", () => {
    const body: api.PageLanguageCreate = undefined
    return expect(instance.createPageLanguagePageLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("createPagePagesPost", () => {
    const body: api.PageCreate = undefined
    return expect(instance.createPagePagesPost(body, {})).resolves.toBe(null)
  })
  test("deletePageLanguagePageLanguagesPageLanguageIdDelete", () => {
    const pageLanguageId: number = 56
    return expect(instance.deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId, {})).resolves.toBe(null)
  })
  test("deletePagePagesPageIdDelete", () => {
    const pageId: number = 56
    return expect(instance.deletePagePagesPageIdDelete(pageId, {})).resolves.toBe(null)
  })
  test("readPageLanguagePageLanguagesPageLanguageIdGet", () => {
    const pageLanguageId: number = 56
    return expect(instance.readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId, {})).resolves.toBe(null)
  })
  test("readPageLanguagesPageLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPageLanguagesPageLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("readPagePagesPageIdGet", () => {
    const pageId: number = 56
    return expect(instance.readPagePagesPageIdGet(pageId, {})).resolves.toBe(null)
  })
  test("readPagesPagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPagesPagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updatePageLanguagePageLanguagesPageLanguageIdPatch", () => {
    const body: api.PageLanguageUpdate = undefined
    const pageLanguageId: number = 56
    return expect(instance.updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId, {})).resolves.toBe(null)
  })
  test("updatePagePagesPageIdPatch", () => {
    const body: api.PageUpdate = undefined
    const pageId: number = 56
    return expect(instance.updatePagePagesPageIdPatch(body, pageId, {})).resolves.toBe(null)
  })
})

describe("PostApi", () => {
  let instance: api.PostApi
  beforeEach(function() {
    instance = new api.PostApi(config)
  });

  test("createPostLanguagePostLanguagesPost", () => {
    const body: api.PostLanguageCreate = undefined
    return expect(instance.createPostLanguagePostLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("createPostPostsPost", () => {
    const body: api.PostCreate = undefined
    return expect(instance.createPostPostsPost(body, {})).resolves.toBe(null)
  })
  test("deletePostLanguagePostLanguagesPostLanguageIdDelete", () => {
    const postLanguageId: number = 56
    return expect(instance.deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, {})).resolves.toBe(null)
  })
  test("deletePostPostsPostIdDelete", () => {
    const postId: number = 56
    return expect(instance.deletePostPostsPostIdDelete(postId, {})).resolves.toBe(null)
  })
  test("readPostLanguagePostLanguagesPostLanguageIdGet", () => {
    const postLanguageId: number = 56
    return expect(instance.readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, {})).resolves.toBe(null)
  })
  test("readPostLanguagesPostLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPostLanguagesPostLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("readPostPostsPostIdGet", () => {
    const postId: number = 56
    return expect(instance.readPostPostsPostIdGet(postId, {})).resolves.toBe(null)
  })
  test("readPostsPostsGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPostsPostsGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updatePostLanguagePostLanguagesPostLanguageIdPatch", () => {
    const body: api.PostLanguageUpdate = undefined
    const postLanguageId: number = 56
    return expect(instance.updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, {})).resolves.toBe(null)
  })
  test("updatePostPostsPostIdPatch", () => {
    const body: api.PostUpdate = undefined
    const postId: number = 56
    return expect(instance.updatePostPostsPostIdPatch(body, postId, {})).resolves.toBe(null)
  })
})

describe("PublicationApi", () => {
  let instance: api.PublicationApi
  beforeEach(function() {
    instance = new api.PublicationApi(config)
  });

  test("createPublicationLanguagePublicationLanguagesPost", () => {
    const body: api.PublicationLanguageCreate = undefined
    return expect(instance.createPublicationLanguagePublicationLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("createPublicationPublicationsPost", () => {
    const body: api.PublicationCreate = undefined
    return expect(instance.createPublicationPublicationsPost(body, {})).resolves.toBe(null)
  })
  test("deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete", () => {
    const publicationLanguageId: number = 56
    return expect(instance.deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, {})).resolves.toBe(null)
  })
  test("deletePublicationPublicationsPublicationIdDelete", () => {
    const publicationId: number = 56
    return expect(instance.deletePublicationPublicationsPublicationIdDelete(publicationId, {})).resolves.toBe(null)
  })
  test("readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet", () => {
    const publicationLanguageId: number = 56
    return expect(instance.readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, {})).resolves.toBe(null)
  })
  test("readPublicationLanguagesPublicationLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPublicationLanguagesPublicationLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("readPublicationPublicationsPublicationIdGet", () => {
    const publicationId: number = 56
    return expect(instance.readPublicationPublicationsPublicationIdGet(publicationId, {})).resolves.toBe(null)
  })
  test("readPublicationsPublicationsGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readPublicationsPublicationsGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch", () => {
    const body: api.PublicationLanguageUpdate = undefined
    const publicationLanguageId: number = 56
    return expect(instance.updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, {})).resolves.toBe(null)
  })
  test("updatePublicationPublicationsPublicationIdPatch", () => {
    const body: api.PublicationUpdate = undefined
    const publicationId: number = 56
    return expect(instance.updatePublicationPublicationsPublicationIdPatch(body, publicationId, {})).resolves.toBe(null)
  })
})

describe("SiteApi", () => {
  let instance: api.SiteApi
  beforeEach(function() {
    instance = new api.SiteApi(config)
  });

  test("createSiteLanguageSiteLanguagesPost", () => {
    const body: api.SiteLanguageCreate = undefined
    return expect(instance.createSiteLanguageSiteLanguagesPost(body, {})).resolves.toBe(null)
  })
  test("createSiteSitesPost", () => {
    const body: api.SiteCreate = undefined
    return expect(instance.createSiteSitesPost(body, {})).resolves.toBe(null)
  })
  test("deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete", () => {
    const siteLanguageId: number = 56
    return expect(instance.deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId, {})).resolves.toBe(null)
  })
  test("deleteSiteSitesSiteIdDelete", () => {
    const siteId: number = 56
    return expect(instance.deleteSiteSitesSiteIdDelete(siteId, {})).resolves.toBe(null)
  })
  test("readSiteLanguageSiteLanguagesSiteLanguageIdGet", () => {
    const siteLanguageId: number = 56
    return expect(instance.readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId, {})).resolves.toBe(null)
  })
  test("readSiteLanguagesSiteLanguagesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readSiteLanguagesSiteLanguagesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("readSiteSitesSiteIdGet", () => {
    const siteId: number = 56
    return expect(instance.readSiteSitesSiteIdGet(siteId, {})).resolves.toBe(null)
  })
  test("readSitesSitesGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.readSitesSitesGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateSiteLanguageSiteLanguagesSiteLanguageIdPatch", () => {
    const body: api.SiteLanguageUpdate = undefined
    const siteLanguageId: number = 56
    return expect(instance.updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body, siteLanguageId, {})).resolves.toBe(null)
  })
  test("updateSiteSitesSiteIdPatch", () => {
    const body: api.SiteUpdate = undefined
    const siteId: number = 56
    return expect(instance.updateSiteSitesSiteIdPatch(body, siteId, {})).resolves.toBe(null)
  })
})

describe("TokenApi", () => {
  let instance: api.TokenApi
  beforeEach(function() {
    instance = new api.TokenApi(config)
  });

  test("createTokenTokenPost", () => {
    const grantType: string = "grantType_example"
    const username: string = "username_example"
    const password: string = "password_example"
    const scope: string = "scope_example"
    const clientId: string = "clientId_example"
    const clientSecret: string = "clientSecret_example"
    return expect(instance.createTokenTokenPost(grantType, username, password, scope, clientId, clientSecret, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("createUserUsersPost", () => {
    const body: api.UserCreate = undefined
    return expect(instance.createUserUsersPost(body, {})).resolves.toBe(null)
  })
  test("deleteUserUsersUserIdDelete", () => {
    const userId: number = 56
    return expect(instance.deleteUserUsersUserIdDelete(userId, {})).resolves.toBe(null)
  })
  test("getCurrentUserUsersMeGet", () => {
    return expect(instance.getCurrentUserUsersMeGet({})).resolves.toBe(null)
  })
  test("getUserUsersUserIdGet", () => {
    const userId: number = 56
    return expect(instance.getUserUsersUserIdGet(userId, {})).resolves.toBe(null)
  })
  test("getUsersUsersGet", () => {
    const q: string = "q_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.getUsersUsersGet(q, offset, limit, {})).resolves.toBe(null)
  })
  test("updateUserUsersUserIdPatch", () => {
    const body: api.UserUpdate = undefined
    const userId: number = 56
    return expect(instance.updateUserUsersUserIdPatch(body, userId, {})).resolves.toBe(null)
  })
})

