/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.PostCreate
import io.swagger.client.models.PostLanguageCreate
import io.swagger.client.models.PostLanguageRead
import io.swagger.client.models.PostLanguageUpdate
import io.swagger.client.models.PostRead
import io.swagger.client.models.PostUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class PostApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Post Language
     * Create a PostLanguage.
     * @param body  
     * @return PostLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPostLanguagePostLanguagesPost(body: PostLanguageCreate): PostLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/post_languages"
        )
        val response = request<PostLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Post
     * Create a Post.
     * @param body  
     * @return PostRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPostPostsPost(body: PostCreate): PostRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/posts"
        )
        val response = request<PostRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Post Language
     * 
     * @param postLanguageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/post_languages/{post_language_id}".replace("{" + "post_language_id" + "}", "$postLanguageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Post
     * 
     * @param postId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePostPostsPostIdDelete(postId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/posts/{post_id}".replace("{" + "post_id" + "}", "$postId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Post Language
     * 
     * @param postLanguageId  
     * @return PostLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId: kotlin.Int): PostLanguageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/post_languages/{post_language_id}".replace("{" + "post_language_id" + "}", "$postLanguageId")
        )
        val response = request<PostLanguageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Post Languages
     * Get all PostLanguage.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PostLanguageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPostLanguagesPostLanguagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PostLanguageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/post_languages", query = localVariableQuery
        )
        val response = request<kotlin.Array<PostLanguageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PostLanguageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Post
     * 
     * @param postId  
     * @return PostRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPostPostsPostIdGet(postId: kotlin.Int): PostRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/posts/{post_id}".replace("{" + "post_id" + "}", "$postId")
        )
        val response = request<PostRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Posts
     * Get all Post.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PostRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPostsPostsGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PostRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/posts", query = localVariableQuery
        )
        val response = request<kotlin.Array<PostRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PostRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Post Language
     * 
     * @param body  
     * @param postLanguageId  
     * @return PostLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePostLanguagePostLanguagesPostLanguageIdPatch(body: PostLanguageUpdate, postLanguageId: kotlin.Int): PostLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/post_languages/{post_language_id}".replace("{" + "post_language_id" + "}", "$postLanguageId")
        )
        val response = request<PostLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Post
     * 
     * @param body  
     * @param postId  
     * @return PostRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePostPostsPostIdPatch(body: PostUpdate, postId: kotlin.Int): PostRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/posts/{post_id}".replace("{" + "post_id" + "}", "$postId")
        )
        val response = request<PostRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PostRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
