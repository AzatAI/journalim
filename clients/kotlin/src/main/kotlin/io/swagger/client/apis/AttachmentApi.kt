/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AttachmentCreate
import io.swagger.client.models.AttachmentRead
import io.swagger.client.models.AttachmentUpdate
import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class AttachmentApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Attachment
     * Create a Attachment.
     * @param body  
     * @return AttachmentRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createAttachmentAttachmentsPost(body: AttachmentCreate): AttachmentRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/attachments"
        )
        val response = request<AttachmentRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AttachmentRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Attachment
     * 
     * @param attachmentId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteAttachmentAttachmentsAttachmentIdDelete(attachmentId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/attachments/{attachment_id}".replace("{" + "attachment_id" + "}", "$attachmentId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Attachment
     * 
     * @param attachmentId  
     * @return AttachmentRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readAttachmentAttachmentsAttachmentIdGet(attachmentId: kotlin.Int): AttachmentRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/attachments/{attachment_id}".replace("{" + "attachment_id" + "}", "$attachmentId")
        )
        val response = request<AttachmentRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AttachmentRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Attachments
     * Get all Attachment.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<AttachmentRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readAttachmentsAttachmentsGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<AttachmentRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/attachments", query = localVariableQuery
        )
        val response = request<kotlin.Array<AttachmentRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AttachmentRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Attachment
     * 
     * @param body  
     * @param attachmentId  
     * @return AttachmentRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateAttachmentAttachmentsAttachmentIdPatch(body: AttachmentUpdate, attachmentId: kotlin.Int): AttachmentRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/attachments/{attachment_id}".replace("{" + "attachment_id" + "}", "$attachmentId")
        )
        val response = request<AttachmentRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AttachmentRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
