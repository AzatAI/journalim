/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.PublicationCreate
import io.swagger.client.models.PublicationLanguageCreate
import io.swagger.client.models.PublicationLanguageRead
import io.swagger.client.models.PublicationLanguageUpdate
import io.swagger.client.models.PublicationRead
import io.swagger.client.models.PublicationUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class PublicationApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Publication Language
     * Create a PublicationLanguage.
     * @param body  
     * @return PublicationLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPublicationLanguagePublicationLanguagesPost(body: PublicationLanguageCreate): PublicationLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/publication_languages"
        )
        val response = request<PublicationLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Publication
     * Create a Publication.
     * @param body  
     * @return PublicationRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPublicationPublicationsPost(body: PublicationCreate): PublicationRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/publications"
        )
        val response = request<PublicationRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Publication Language
     * 
     * @param publicationLanguageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/publication_languages/{publication_language_id}".replace("{" + "publication_language_id" + "}", "$publicationLanguageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Publication
     * 
     * @param publicationId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePublicationPublicationsPublicationIdDelete(publicationId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/publications/{publication_id}".replace("{" + "publication_id" + "}", "$publicationId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Publication Language
     * 
     * @param publicationLanguageId  
     * @return PublicationLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId: kotlin.Int): PublicationLanguageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/publication_languages/{publication_language_id}".replace("{" + "publication_language_id" + "}", "$publicationLanguageId")
        )
        val response = request<PublicationLanguageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Publication Languages
     * Get all PublicationLanguage.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PublicationLanguageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPublicationLanguagesPublicationLanguagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PublicationLanguageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/publication_languages", query = localVariableQuery
        )
        val response = request<kotlin.Array<PublicationLanguageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PublicationLanguageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Publication
     * 
     * @param publicationId  
     * @return PublicationRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPublicationPublicationsPublicationIdGet(publicationId: kotlin.Int): PublicationRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/publications/{publication_id}".replace("{" + "publication_id" + "}", "$publicationId")
        )
        val response = request<PublicationRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Publications
     * Get all Publication.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PublicationRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPublicationsPublicationsGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PublicationRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/publications", query = localVariableQuery
        )
        val response = request<kotlin.Array<PublicationRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PublicationRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Publication Language
     * 
     * @param body  
     * @param publicationLanguageId  
     * @return PublicationLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body: PublicationLanguageUpdate, publicationLanguageId: kotlin.Int): PublicationLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/publication_languages/{publication_language_id}".replace("{" + "publication_language_id" + "}", "$publicationLanguageId")
        )
        val response = request<PublicationLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Publication
     * 
     * @param body  
     * @param publicationId  
     * @return PublicationRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePublicationPublicationsPublicationIdPatch(body: PublicationUpdate, publicationId: kotlin.Int): PublicationRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/publications/{publication_id}".replace("{" + "publication_id" + "}", "$publicationId")
        )
        val response = request<PublicationRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicationRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
