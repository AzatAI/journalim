/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.Token

import io.swagger.client.infrastructure.*

class TokenApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Token
     * 
     * @param grantType  
     * @param username  
     * @param password  
     * @param scope  
     * @param clientId  
     * @param clientSecret  
     * @return Token
     */
    @Suppress("UNCHECKED_CAST")
    fun createTokenTokenPost(grantType: kotlin.String, username: kotlin.String, password: kotlin.String, scope: kotlin.String, clientId: kotlin.String, clientSecret: kotlin.String): Token {
        val localVariableBody: kotlin.Any? = mapOf("grant_type" to "$grantType", "username" to "$username", "password" to "$password", "scope" to "$scope", "client_id" to "$clientId", "client_secret" to "$clientSecret")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/token", headers = localVariableHeaders
        )
        val response = request<Token>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Token
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
