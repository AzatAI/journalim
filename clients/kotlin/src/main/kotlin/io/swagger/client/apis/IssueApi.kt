/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.IssueCreate
import io.swagger.client.models.IssueLanguageCreate
import io.swagger.client.models.IssueLanguageRead
import io.swagger.client.models.IssueLanguageUpdate
import io.swagger.client.models.IssueRead
import io.swagger.client.models.IssueUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class IssueApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Issue
     * Create an Issue.
     * @param body  
     * @return IssueRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createIssueIssuesPost(body: IssueCreate): IssueRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/issues"
        )
        val response = request<IssueRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Issue Language
     * Create a IssueLanguage.
     * @param body  
     * @return IssueLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createIssueLanguageIssueLanguagesPost(body: IssueLanguageCreate): IssueLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/issue_languages"
        )
        val response = request<IssueLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Issue
     * 
     * @param issueId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteIssueIssuesIssueIdDelete(issueId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/issues/{issue_id}".replace("{" + "issue_id" + "}", "$issueId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Issue Language
     * 
     * @param issueLanguageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/issue_languages/{issue_language_id}".replace("{" + "issue_language_id" + "}", "$issueLanguageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Issue
     * 
     * @param issueId  
     * @return IssueRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readIssueIssuesIssueIdGet(issueId: kotlin.Int): IssueRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/issues/{issue_id}".replace("{" + "issue_id" + "}", "$issueId")
        )
        val response = request<IssueRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Issue Language
     * 
     * @param issueLanguageId  
     * @return IssueLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId: kotlin.Int): IssueLanguageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/issue_languages/{issue_language_id}".replace("{" + "issue_language_id" + "}", "$issueLanguageId")
        )
        val response = request<IssueLanguageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Issue Languages
     * Get all IssueLanguage.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<IssueLanguageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readIssueLanguagesIssueLanguagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<IssueLanguageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/issue_languages", query = localVariableQuery
        )
        val response = request<kotlin.Array<IssueLanguageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<IssueLanguageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Issues
     * Get all Issue.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<IssueRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readIssuesIssuesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<IssueRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/issues", query = localVariableQuery
        )
        val response = request<kotlin.Array<IssueRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<IssueRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Issue
     * 
     * @param body  
     * @param issueId  
     * @return IssueRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateIssueIssuesIssueIdPatch(body: IssueUpdate, issueId: kotlin.Int): IssueRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/issues/{issue_id}".replace("{" + "issue_id" + "}", "$issueId")
        )
        val response = request<IssueRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Issue Language
     * 
     * @param body  
     * @param issueLanguageId  
     * @return IssueLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body: IssueLanguageUpdate, issueLanguageId: kotlin.Int): IssueLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/issue_languages/{issue_language_id}".replace("{" + "issue_language_id" + "}", "$issueLanguageId")
        )
        val response = request<IssueLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IssueLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
