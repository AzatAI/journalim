/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.SuccessResponseModel
import io.swagger.client.models.UserCreate
import io.swagger.client.models.UserRead
import io.swagger.client.models.UserUpdate

import io.swagger.client.infrastructure.*

class UserApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create User
     * Create a new User
     * @param body  
     * @return UserRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createUserUsersPost(body: UserCreate): UserRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users"
        )
        val response = request<UserRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete User
     * Delete a User
     * @param userId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteUserUsersUserIdDelete(userId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/users/{user_id}".replace("{" + "user_id" + "}", "$userId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Current User
     * Get all Users
     * @return UserRead
     */
    @Suppress("UNCHECKED_CAST")
    fun getCurrentUserUsersMeGet(): UserRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users/me"
        )
        val response = request<UserRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get User
     * Get a User by ID
     * @param userId  
     * @return UserRead
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserUsersUserIdGet(userId: kotlin.Int): UserRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users/{user_id}".replace("{" + "user_id" + "}", "$userId")
        )
        val response = request<UserRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Users
     * Get all Users. staff [ok] admin [ok]
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<UserRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun getUsersUsersGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<UserRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users", query = localVariableQuery
        )
        val response = request<kotlin.Array<UserRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update User
     * Update a User
     * @param body  
     * @param userId  
     * @return UserRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateUserUsersUserIdPatch(body: UserUpdate, userId: kotlin.Int): UserRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/users/{user_id}".replace("{" + "user_id" + "}", "$userId")
        )
        val response = request<UserRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
