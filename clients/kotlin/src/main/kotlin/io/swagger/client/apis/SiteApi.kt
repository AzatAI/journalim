/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.SiteCreate
import io.swagger.client.models.SiteLanguageCreate
import io.swagger.client.models.SiteLanguageRead
import io.swagger.client.models.SiteLanguageUpdate
import io.swagger.client.models.SiteRead
import io.swagger.client.models.SiteUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class SiteApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Site Language
     * Create a SiteLanguage.
     * @param body  
     * @return SiteLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createSiteLanguageSiteLanguagesPost(body: SiteLanguageCreate): SiteLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/site_languages"
        )
        val response = request<SiteLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Site
     * Create a Site.
     * @param body  
     * @return SiteRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createSiteSitesPost(body: SiteCreate): SiteRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/sites"
        )
        val response = request<SiteRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Site Language
     * 
     * @param siteLanguageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/site_languages/{site_language_id}".replace("{" + "site_language_id" + "}", "$siteLanguageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Site
     * 
     * @param siteId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteSiteSitesSiteIdDelete(siteId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/sites/{site_id}".replace("{" + "site_id" + "}", "$siteId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Site Language
     * 
     * @param siteLanguageId  
     * @return SiteLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId: kotlin.Int): SiteLanguageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/site_languages/{site_language_id}".replace("{" + "site_language_id" + "}", "$siteLanguageId")
        )
        val response = request<SiteLanguageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Site Languages
     * Get all SiteLanguage.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<SiteLanguageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readSiteLanguagesSiteLanguagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<SiteLanguageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/site_languages", query = localVariableQuery
        )
        val response = request<kotlin.Array<SiteLanguageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SiteLanguageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Site
     * 
     * @param siteId  
     * @return SiteRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readSiteSitesSiteIdGet(siteId: kotlin.Int): SiteRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/sites/{site_id}".replace("{" + "site_id" + "}", "$siteId")
        )
        val response = request<SiteRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Sites
     * Get all Site.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<SiteRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readSitesSitesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<SiteRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/sites", query = localVariableQuery
        )
        val response = request<kotlin.Array<SiteRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SiteRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Site Language
     * 
     * @param body  
     * @param siteLanguageId  
     * @return SiteLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body: SiteLanguageUpdate, siteLanguageId: kotlin.Int): SiteLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/site_languages/{site_language_id}".replace("{" + "site_language_id" + "}", "$siteLanguageId")
        )
        val response = request<SiteLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Site
     * 
     * @param body  
     * @param siteId  
     * @return SiteRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateSiteSitesSiteIdPatch(body: SiteUpdate, siteId: kotlin.Int): SiteRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/sites/{site_id}".replace("{" + "site_id" + "}", "$siteId")
        )
        val response = request<SiteRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SiteRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
