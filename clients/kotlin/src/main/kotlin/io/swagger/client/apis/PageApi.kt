/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.PageCreate
import io.swagger.client.models.PageLanguageCreate
import io.swagger.client.models.PageLanguageRead
import io.swagger.client.models.PageLanguageUpdate
import io.swagger.client.models.PageRead
import io.swagger.client.models.PageUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class PageApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Page Language
     * Create a PageLanguage.
     * @param body  
     * @return PageLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPageLanguagePageLanguagesPost(body: PageLanguageCreate): PageLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/page_languages"
        )
        val response = request<PageLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Page
     * Create a Page.
     * @param body  
     * @return PageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun createPagePagesPost(body: PageCreate): PageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pages"
        )
        val response = request<PageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Page Language
     * 
     * @param pageLanguageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/page_languages/{page_language_id}".replace("{" + "page_language_id" + "}", "$pageLanguageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Page
     * 
     * @param pageId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deletePagePagesPageIdDelete(pageId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/pages/{page_id}".replace("{" + "page_id" + "}", "$pageId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Page Language
     * 
     * @param pageLanguageId  
     * @return PageLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId: kotlin.Int): PageLanguageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/page_languages/{page_language_id}".replace("{" + "page_language_id" + "}", "$pageLanguageId")
        )
        val response = request<PageLanguageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Page Languages
     * Get all PageLanguage.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PageLanguageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPageLanguagesPageLanguagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PageLanguageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/page_languages", query = localVariableQuery
        )
        val response = request<kotlin.Array<PageLanguageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PageLanguageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Page
     * 
     * @param pageId  
     * @return PageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readPagePagesPageIdGet(pageId: kotlin.Int): PageRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pages/{page_id}".replace("{" + "page_id" + "}", "$pageId")
        )
        val response = request<PageRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Pages
     * Get all Page.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<PageRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readPagesPagesGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<PageRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pages", query = localVariableQuery
        )
        val response = request<kotlin.Array<PageRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PageRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Page Language
     * 
     * @param body  
     * @param pageLanguageId  
     * @return PageLanguageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePageLanguagePageLanguagesPageLanguageIdPatch(body: PageLanguageUpdate, pageLanguageId: kotlin.Int): PageLanguageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/page_languages/{page_language_id}".replace("{" + "page_language_id" + "}", "$pageLanguageId")
        )
        val response = request<PageLanguageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageLanguageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Page
     * 
     * @param body  
     * @param pageId  
     * @return PageRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePagePagesPageIdPatch(body: PageUpdate, pageId: kotlin.Int): PageRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/pages/{page_id}".replace("{" + "page_id" + "}", "$pageId")
        )
        val response = request<PageRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
