/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponseModel
import io.swagger.client.models.GenericFileUploadResponse
import io.swagger.client.models.HTTPValidationError
import io.swagger.client.models.MediaRead
import io.swagger.client.models.MediaUpdate
import io.swagger.client.models.SuccessResponseModel

import io.swagger.client.infrastructure.*

class MediaApi(basePath: kotlin.String = "http://journalim.gepsoz.com") : ApiClient(basePath) {

    /**
     * Create Upload
     * Upload a file to the server.   This file later can be served to user either publicly or privately(for signed-in users only)   Hints: Private files can be used for creating new issue attachments (PDFs)!   &lt;span style:\&quot;color:red\&quot;&gt;WARN&lt;/span&gt; : Uploading files with same filename might overwrite the existing files.
     * @param file  
     * @param &#x60;public&#x60;  (optional, default to false)
     * @return GenericFileUploadResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun createUploadUploadPost(file: kotlin.Array<kotlin.Byte>, &#x60;public&#x60;: kotlin.Boolean? = null): GenericFileUploadResponse {
        val localVariableBody: kotlin.Any? = mapOf("file" to "$file")
        val localVariableQuery: MultiValueMap = mapOf("public" to listOf("$&#x60;public&#x60;"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/upload", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GenericFileUploadResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GenericFileUploadResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Media
     * 
     * @param mediaId  
     * @return SuccessResponseModel
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteMediaMediasMediaIdDelete(mediaId: kotlin.Int): SuccessResponseModel {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/medias/{media_id}".replace("{" + "media_id" + "}", "$mediaId")
        )
        val response = request<SuccessResponseModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SuccessResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Media
     * 
     * @param mediaId  
     * @return MediaRead
     */
    @Suppress("UNCHECKED_CAST")
    fun readMediaMediasMediaIdGet(mediaId: kotlin.Int): MediaRead {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/medias/{media_id}".replace("{" + "media_id" + "}", "$mediaId")
        )
        val response = request<MediaRead>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MediaRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read Medias
     * Get all Media.
     * @param q  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 100)
     * @return kotlin.Array<MediaRead>
     */
    @Suppress("UNCHECKED_CAST")
    fun readMediasMediasGet(q: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<MediaRead> {
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "offset" to listOf("$offset"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/medias", query = localVariableQuery
        )
        val response = request<kotlin.Array<MediaRead>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<MediaRead>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Media
     * 
     * @param body  
     * @param mediaId  
     * @return MediaRead
     */
    @Suppress("UNCHECKED_CAST")
    fun updateMediaMediasMediaIdPatch(body: MediaUpdate, mediaId: kotlin.Int): MediaRead {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/medias/{media_id}".replace("{" + "media_id" + "}", "$mediaId")
        )
        val response = request<MediaRead>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MediaRead
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
