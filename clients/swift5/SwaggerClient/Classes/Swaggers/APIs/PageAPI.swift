//
// PageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PageAPI {
    /**
     Create Page Language

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPageLanguagePageLanguagesPost(body: PageLanguageCreate, completion: @escaping ((_ data: PageLanguageRead?,_ error: Error?) -> Void)) {
        createPageLanguagePageLanguagesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Page Language
     - POST /page_languages

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "page_id" : 0,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PageLanguageRead> 
     */
    open class func createPageLanguagePageLanguagesPostWithRequestBuilder(body: PageLanguageCreate) -> RequestBuilder<PageLanguageRead> {
        let path = "/page_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create Page

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPagePagesPost(body: PageCreate, completion: @escaping ((_ data: PageRead?,_ error: Error?) -> Void)) {
        createPagePagesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Page
     - POST /pages

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PageRead> 
     */
    open class func createPagePagesPostWithRequestBuilder(body: PageCreate) -> RequestBuilder<PageRead> {
        let path = "/pages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete Page Language

     - parameter pageLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deletePageLanguagePageLanguagesPageLanguageIdDeleteWithRequestBuilder(pageLanguageId: pageLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Page Language
     - DELETE /page_languages/{page_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter pageLanguageId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deletePageLanguagePageLanguagesPageLanguageIdDeleteWithRequestBuilder(pageLanguageId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/page_languages/{page_language_id}"
        let pageLanguageIdPreEscape = "\(pageLanguageId)"
        let pageLanguageIdPostEscape = pageLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_language_id}", with: pageLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete Page

     - parameter pageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePagePagesPageIdDelete(pageId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deletePagePagesPageIdDeleteWithRequestBuilder(pageId: pageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Page
     - DELETE /pages/{page_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter pageId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deletePagePagesPageIdDeleteWithRequestBuilder(pageId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/pages/{page_id}"
        let pageIdPreEscape = "\(pageId)"
        let pageIdPostEscape = pageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_id}", with: pageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Page Language

     - parameter pageLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId: Int, completion: @escaping ((_ data: PageLanguageRead?,_ error: Error?) -> Void)) {
        readPageLanguagePageLanguagesPageLanguageIdGetWithRequestBuilder(pageLanguageId: pageLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Page Language
     - GET /page_languages/{page_language_id}
     - 

     - examples: [{contentType=application/json, example={
  "page_id" : 0,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter pageLanguageId: (path)  

     - returns: RequestBuilder<PageLanguageRead> 
     */
    open class func readPageLanguagePageLanguagesPageLanguageIdGetWithRequestBuilder(pageLanguageId: Int) -> RequestBuilder<PageLanguageRead> {
        var path = "/page_languages/{page_language_id}"
        let pageLanguageIdPreEscape = "\(pageLanguageId)"
        let pageLanguageIdPostEscape = pageLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_language_id}", with: pageLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Page Languages

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPageLanguagesPageLanguagesGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PageLanguageRead]?,_ error: Error?) -> Void)) {
        readPageLanguagesPageLanguagesGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Page Languages
     - GET /page_languages

     - examples: [{contentType=application/json, example=[ {
  "page_id" : 0,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}, {
  "page_id" : 0,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[PageLanguageRead]> 
     */
    open class func readPageLanguagesPageLanguagesGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PageLanguageRead]> {
        let path = "/page_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PageLanguageRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Page

     - parameter pageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPagePagesPageIdGet(pageId: Int, completion: @escaping ((_ data: PageRead?,_ error: Error?) -> Void)) {
        readPagePagesPageIdGetWithRequestBuilder(pageId: pageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Page
     - GET /pages/{page_id}
     - 

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter pageId: (path)  

     - returns: RequestBuilder<PageRead> 
     */
    open class func readPagePagesPageIdGetWithRequestBuilder(pageId: Int) -> RequestBuilder<PageRead> {
        var path = "/pages/{page_id}"
        let pageIdPreEscape = "\(pageId)"
        let pageIdPostEscape = pageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_id}", with: pageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Pages

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPagesPagesGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PageRead]?,_ error: Error?) -> Void)) {
        readPagesPagesGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Pages
     - GET /pages

     - examples: [{contentType=application/json, example=[ {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}, {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[PageRead]> 
     */
    open class func readPagesPagesGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PageRead]> {
        let path = "/pages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PageRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update Page Language

     - parameter body: (body)  
     - parameter pageLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePageLanguagePageLanguagesPageLanguageIdPatch(body: PageLanguageUpdate, pageLanguageId: Int, completion: @escaping ((_ data: PageLanguageRead?,_ error: Error?) -> Void)) {
        updatePageLanguagePageLanguagesPageLanguageIdPatchWithRequestBuilder(body: body, pageLanguageId: pageLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Page Language
     - PATCH /page_languages/{page_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "page_id" : 0,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter body: (body)  
     - parameter pageLanguageId: (path)  

     - returns: RequestBuilder<PageLanguageRead> 
     */
    open class func updatePageLanguagePageLanguagesPageLanguageIdPatchWithRequestBuilder(body: PageLanguageUpdate, pageLanguageId: Int) -> RequestBuilder<PageLanguageRead> {
        var path = "/page_languages/{page_language_id}"
        let pageLanguageIdPreEscape = "\(pageLanguageId)"
        let pageLanguageIdPostEscape = pageLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_language_id}", with: pageLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update Page

     - parameter body: (body)  
     - parameter pageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePagePagesPageIdPatch(body: PageUpdate, pageId: Int, completion: @escaping ((_ data: PageRead?,_ error: Error?) -> Void)) {
        updatePagePagesPageIdPatchWithRequestBuilder(body: body, pageId: pageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Page
     - PATCH /pages/{page_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter body: (body)  
     - parameter pageId: (path)  

     - returns: RequestBuilder<PageRead> 
     */
    open class func updatePagePagesPageIdPatchWithRequestBuilder(body: PageUpdate, pageId: Int) -> RequestBuilder<PageRead> {
        var path = "/pages/{page_id}"
        let pageIdPreEscape = "\(pageId)"
        let pageIdPostEscape = pageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page_id}", with: pageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
