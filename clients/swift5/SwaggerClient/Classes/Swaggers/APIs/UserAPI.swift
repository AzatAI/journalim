//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserAPI {
    /**
     Create User

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserUsersPost(body: UserCreate, completion: @escaping ((_ data: UserRead?,_ error: Error?) -> Void)) {
        createUserUsersPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create User
     - POST /users

     - examples: [{contentType=application/json, example={
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<UserRead> 
     */
    open class func createUserUsersPostWithRequestBuilder(body: UserCreate) -> RequestBuilder<UserRead> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete User

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserUsersUserIdDelete(userId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deleteUserUsersUserIdDeleteWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete User
     - DELETE /users/{user_id}

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter userId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deleteUserUsersUserIdDeleteWithRequestBuilder(userId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/users/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Current User

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentUserUsersMeGet(completion: @escaping ((_ data: UserRead?,_ error: Error?) -> Void)) {
        getCurrentUserUsersMeGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Current User
     - GET /users/me

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
}}]

     - returns: RequestBuilder<UserRead> 
     */
    open class func getCurrentUserUsersMeGetWithRequestBuilder() -> RequestBuilder<UserRead> {
        let path = "/users/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get User

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserUsersUserIdGet(userId: Int, completion: @escaping ((_ data: UserRead?,_ error: Error?) -> Void)) {
        getUserUsersUserIdGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get User
     - GET /users/{user_id}

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
}}]
     - parameter userId: (path)  

     - returns: RequestBuilder<UserRead> 
     */
    open class func getUserUsersUserIdGetWithRequestBuilder(userId: Int) -> RequestBuilder<UserRead> {
        var path = "/users/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Users

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersUsersGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [UserRead]?,_ error: Error?) -> Void)) {
        getUsersUsersGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Users
     - GET /users

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example=[ {
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
}, {
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[UserRead]> 
     */
    open class func getUsersUsersGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[UserRead]> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[UserRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update User

     - parameter body: (body)  
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserUsersUserIdPatch(body: UserUpdate, userId: Int, completion: @escaping ((_ data: UserRead?,_ error: Error?) -> Void)) {
        updateUserUsersUserIdPatchWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update User
     - PATCH /users/{user_id}

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "is_admin" : false,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "is_staff" : false,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "fullname" : "fullname",
  "id" : 0,
  "email" : "",
  "username" : "username"
}}]
     - parameter body: (body)  
     - parameter userId: (path)  

     - returns: RequestBuilder<UserRead> 
     */
    open class func updateUserUsersUserIdPatchWithRequestBuilder(body: UserUpdate, userId: Int) -> RequestBuilder<UserRead> {
        var path = "/users/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
