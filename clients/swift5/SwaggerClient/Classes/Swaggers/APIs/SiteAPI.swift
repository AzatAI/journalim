//
// SiteAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SiteAPI {
    /**
     Create Site Language

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSiteLanguageSiteLanguagesPost(body: SiteLanguageCreate, completion: @escaping ((_ data: SiteLanguageRead?,_ error: Error?) -> Void)) {
        createSiteLanguageSiteLanguagesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Site Language
     - POST /site_languages

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "alternative_logo" : "alternative_logo",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<SiteLanguageRead> 
     */
    open class func createSiteLanguageSiteLanguagesPostWithRequestBuilder(body: SiteLanguageCreate) -> RequestBuilder<SiteLanguageRead> {
        let path = "/site_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create Site

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSiteSitesPost(body: SiteCreate, completion: @escaping ((_ data: SiteRead?,_ error: Error?) -> Void)) {
        createSiteSitesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Site
     - POST /sites

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_url" : "site_url",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "logo" : "logo",
  "id" : 0,
  "title" : "title"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<SiteRead> 
     */
    open class func createSiteSitesPostWithRequestBuilder(body: SiteCreate) -> RequestBuilder<SiteRead> {
        let path = "/sites"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete Site Language

     - parameter siteLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deleteSiteLanguageSiteLanguagesSiteLanguageIdDeleteWithRequestBuilder(siteLanguageId: siteLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Site Language
     - DELETE /site_languages/{site_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter siteLanguageId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deleteSiteLanguageSiteLanguagesSiteLanguageIdDeleteWithRequestBuilder(siteLanguageId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/site_languages/{site_language_id}"
        let siteLanguageIdPreEscape = "\(siteLanguageId)"
        let siteLanguageIdPostEscape = siteLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_language_id}", with: siteLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete Site

     - parameter siteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteSitesSiteIdDelete(siteId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deleteSiteSitesSiteIdDeleteWithRequestBuilder(siteId: siteId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Site
     - DELETE /sites/{site_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter siteId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deleteSiteSitesSiteIdDeleteWithRequestBuilder(siteId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/sites/{site_id}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_id}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Site Language

     - parameter siteLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId: Int, completion: @escaping ((_ data: SiteLanguageRead?,_ error: Error?) -> Void)) {
        readSiteLanguageSiteLanguagesSiteLanguageIdGetWithRequestBuilder(siteLanguageId: siteLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Site Language
     - GET /site_languages/{site_language_id}
     - 

     - examples: [{contentType=application/json, example={
  "alternative_logo" : "alternative_logo",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title"
}}]
     - parameter siteLanguageId: (path)  

     - returns: RequestBuilder<SiteLanguageRead> 
     */
    open class func readSiteLanguageSiteLanguagesSiteLanguageIdGetWithRequestBuilder(siteLanguageId: Int) -> RequestBuilder<SiteLanguageRead> {
        var path = "/site_languages/{site_language_id}"
        let siteLanguageIdPreEscape = "\(siteLanguageId)"
        let siteLanguageIdPostEscape = siteLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_language_id}", with: siteLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Site Languages

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readSiteLanguagesSiteLanguagesGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [SiteLanguageRead]?,_ error: Error?) -> Void)) {
        readSiteLanguagesSiteLanguagesGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Site Languages
     - GET /site_languages

     - examples: [{contentType=application/json, example=[ {
  "alternative_logo" : "alternative_logo",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title"
}, {
  "alternative_logo" : "alternative_logo",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[SiteLanguageRead]> 
     */
    open class func readSiteLanguagesSiteLanguagesGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[SiteLanguageRead]> {
        let path = "/site_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SiteLanguageRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Site

     - parameter siteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readSiteSitesSiteIdGet(siteId: Int, completion: @escaping ((_ data: SiteRead?,_ error: Error?) -> Void)) {
        readSiteSitesSiteIdGetWithRequestBuilder(siteId: siteId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Site
     - GET /sites/{site_id}
     - 

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_url" : "site_url",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "logo" : "logo",
  "id" : 0,
  "title" : "title"
}}]
     - parameter siteId: (path)  

     - returns: RequestBuilder<SiteRead> 
     */
    open class func readSiteSitesSiteIdGetWithRequestBuilder(siteId: Int) -> RequestBuilder<SiteRead> {
        var path = "/sites/{site_id}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_id}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Sites

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readSitesSitesGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [SiteRead]?,_ error: Error?) -> Void)) {
        readSitesSitesGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Sites
     - GET /sites

     - examples: [{contentType=application/json, example=[ {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_url" : "site_url",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "logo" : "logo",
  "id" : 0,
  "title" : "title"
}, {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_url" : "site_url",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "logo" : "logo",
  "id" : 0,
  "title" : "title"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[SiteRead]> 
     */
    open class func readSitesSitesGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[SiteRead]> {
        let path = "/sites"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SiteRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update Site Language

     - parameter body: (body)  
     - parameter siteLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body: SiteLanguageUpdate, siteLanguageId: Int, completion: @escaping ((_ data: SiteLanguageRead?,_ error: Error?) -> Void)) {
        updateSiteLanguageSiteLanguagesSiteLanguageIdPatchWithRequestBuilder(body: body, siteLanguageId: siteLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Site Language
     - PATCH /site_languages/{site_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "alternative_logo" : "alternative_logo",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title"
}}]
     - parameter body: (body)  
     - parameter siteLanguageId: (path)  

     - returns: RequestBuilder<SiteLanguageRead> 
     */
    open class func updateSiteLanguageSiteLanguagesSiteLanguageIdPatchWithRequestBuilder(body: SiteLanguageUpdate, siteLanguageId: Int) -> RequestBuilder<SiteLanguageRead> {
        var path = "/site_languages/{site_language_id}"
        let siteLanguageIdPreEscape = "\(siteLanguageId)"
        let siteLanguageIdPostEscape = siteLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_language_id}", with: siteLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update Site

     - parameter body: (body)  
     - parameter siteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSiteSitesSiteIdPatch(body: SiteUpdate, siteId: Int, completion: @escaping ((_ data: SiteRead?,_ error: Error?) -> Void)) {
        updateSiteSitesSiteIdPatchWithRequestBuilder(body: body, siteId: siteId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Site
     - PATCH /sites/{site_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "site_url" : "site_url",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "logo" : "logo",
  "id" : 0,
  "title" : "title"
}}]
     - parameter body: (body)  
     - parameter siteId: (path)  

     - returns: RequestBuilder<SiteRead> 
     */
    open class func updateSiteSitesSiteIdPatchWithRequestBuilder(body: SiteUpdate, siteId: Int) -> RequestBuilder<SiteRead> {
        var path = "/sites/{site_id}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{site_id}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SiteRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
