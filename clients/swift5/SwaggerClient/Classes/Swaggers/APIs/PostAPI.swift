//
// PostAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PostAPI {
    /**
     Create Post Language

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPostLanguagePostLanguagesPost(body: PostLanguageCreate, completion: @escaping ((_ data: PostLanguageRead?,_ error: Error?) -> Void)) {
        createPostLanguagePostLanguagesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Post Language
     - POST /post_languages

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "post_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PostLanguageRead> 
     */
    open class func createPostLanguagePostLanguagesPostWithRequestBuilder(body: PostLanguageCreate) -> RequestBuilder<PostLanguageRead> {
        let path = "/post_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create Post

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPostPostsPost(body: PostCreate, completion: @escaping ((_ data: PostRead?,_ error: Error?) -> Void)) {
        createPostPostsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Post
     - POST /posts

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<PostRead> 
     */
    open class func createPostPostsPostWithRequestBuilder(body: PostCreate) -> RequestBuilder<PostRead> {
        let path = "/posts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete Post Language

     - parameter postLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deletePostLanguagePostLanguagesPostLanguageIdDeleteWithRequestBuilder(postLanguageId: postLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Post Language
     - DELETE /post_languages/{post_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter postLanguageId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deletePostLanguagePostLanguagesPostLanguageIdDeleteWithRequestBuilder(postLanguageId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/post_languages/{post_language_id}"
        let postLanguageIdPreEscape = "\(postLanguageId)"
        let postLanguageIdPostEscape = postLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_language_id}", with: postLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete Post

     - parameter postId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePostPostsPostIdDelete(postId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deletePostPostsPostIdDeleteWithRequestBuilder(postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Post
     - DELETE /posts/{post_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter postId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deletePostPostsPostIdDeleteWithRequestBuilder(postId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/posts/{post_id}"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_id}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Post Language

     - parameter postLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId: Int, completion: @escaping ((_ data: PostLanguageRead?,_ error: Error?) -> Void)) {
        readPostLanguagePostLanguagesPostLanguageIdGetWithRequestBuilder(postLanguageId: postLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Post Language
     - GET /post_languages/{post_language_id}
     - 

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "post_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter postLanguageId: (path)  

     - returns: RequestBuilder<PostLanguageRead> 
     */
    open class func readPostLanguagePostLanguagesPostLanguageIdGetWithRequestBuilder(postLanguageId: Int) -> RequestBuilder<PostLanguageRead> {
        var path = "/post_languages/{post_language_id}"
        let postLanguageIdPreEscape = "\(postLanguageId)"
        let postLanguageIdPostEscape = postLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_language_id}", with: postLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Post Languages

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPostLanguagesPostLanguagesGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PostLanguageRead]?,_ error: Error?) -> Void)) {
        readPostLanguagesPostLanguagesGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Post Languages
     - GET /post_languages

     - examples: [{contentType=application/json, example=[ {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "post_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}, {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "post_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[PostLanguageRead]> 
     */
    open class func readPostLanguagesPostLanguagesGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PostLanguageRead]> {
        let path = "/post_languages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PostLanguageRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Post

     - parameter postId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPostPostsPostIdGet(postId: Int, completion: @escaping ((_ data: PostRead?,_ error: Error?) -> Void)) {
        readPostPostsPostIdGetWithRequestBuilder(postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Post
     - GET /posts/{post_id}
     - 

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter postId: (path)  

     - returns: RequestBuilder<PostRead> 
     */
    open class func readPostPostsPostIdGetWithRequestBuilder(postId: Int) -> RequestBuilder<PostRead> {
        var path = "/posts/{post_id}"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_id}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Posts

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readPostsPostsGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PostRead]?,_ error: Error?) -> Void)) {
        readPostsPostsGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Posts
     - GET /posts

     - examples: [{contentType=application/json, example=[ {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}, {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[PostRead]> 
     */
    open class func readPostsPostsGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PostRead]> {
        let path = "/posts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PostRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update Post Language

     - parameter body: (body)  
     - parameter postLanguageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePostLanguagePostLanguagesPostLanguageIdPatch(body: PostLanguageUpdate, postLanguageId: Int, completion: @escaping ((_ data: PostLanguageRead?,_ error: Error?) -> Void)) {
        updatePostLanguagePostLanguagesPostLanguageIdPatchWithRequestBuilder(body: body, postLanguageId: postLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Post Language
     - PATCH /post_languages/{post_language_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "post_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "language_id" : 6,
  "id" : 1,
  "title" : "title",
  "content" : "content"
}}]
     - parameter body: (body)  
     - parameter postLanguageId: (path)  

     - returns: RequestBuilder<PostLanguageRead> 
     */
    open class func updatePostLanguagePostLanguagesPostLanguageIdPatchWithRequestBuilder(body: PostLanguageUpdate, postLanguageId: Int) -> RequestBuilder<PostLanguageRead> {
        var path = "/post_languages/{post_language_id}"
        let postLanguageIdPreEscape = "\(postLanguageId)"
        let postLanguageIdPostEscape = postLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_language_id}", with: postLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostLanguageRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update Post

     - parameter body: (body)  
     - parameter postId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePostPostsPostIdPatch(body: PostUpdate, postId: Int, completion: @escaping ((_ data: PostRead?,_ error: Error?) -> Void)) {
        updatePostPostsPostIdPatchWithRequestBuilder(body: body, postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Post
     - PATCH /posts/{post_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "keywords" : "keywords",
  "author" : "author",
  "site_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 6,
  "title" : "title",
  "featured_image" : "featured_image",
  "content" : "content"
}}]
     - parameter body: (body)  
     - parameter postId: (path)  

     - returns: RequestBuilder<PostRead> 
     */
    open class func updatePostPostsPostIdPatchWithRequestBuilder(body: PostUpdate, postId: Int) -> RequestBuilder<PostRead> {
        var path = "/posts/{post_id}"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{post_id}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
