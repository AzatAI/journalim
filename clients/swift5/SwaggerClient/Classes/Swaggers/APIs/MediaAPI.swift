//
// MediaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MediaAPI {
    /**
     Create Upload

     - parameter file: (form)  
     - parameter _public: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUploadUploadPost(file: Data, _public: Bool? = nil, completion: @escaping ((_ data: GenericFileUploadResponse?,_ error: Error?) -> Void)) {
        createUploadUploadPostWithRequestBuilder(file: file, _public: _public).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Upload
     - POST /upload

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "path" : "",
  "access_type" : "access_type",
  "content_type" : "content_type",
  "access_url" : "access_url",
  "name" : "name",
  "description" : "description"
}}]
     - parameter file: (form)  
     - parameter _public: (query)  (optional, default to false)

     - returns: RequestBuilder<GenericFileUploadResponse> 
     */
    open class func createUploadUploadPostWithRequestBuilder(file: Data, _public: Bool? = nil) -> RequestBuilder<GenericFileUploadResponse> {
        let path = "/upload"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "public": _public
        ])


        let requestBuilder: RequestBuilder<GenericFileUploadResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete Media

     - parameter mediaId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMediaMediasMediaIdDelete(mediaId: Int, completion: @escaping ((_ data: SuccessResponseModel?,_ error: Error?) -> Void)) {
        deleteMediaMediasMediaIdDeleteWithRequestBuilder(mediaId: mediaId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Media
     - DELETE /medias/{media_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     - parameter mediaId: (path)  

     - returns: RequestBuilder<SuccessResponseModel> 
     */
    open class func deleteMediaMediasMediaIdDeleteWithRequestBuilder(mediaId: Int) -> RequestBuilder<SuccessResponseModel> {
        var path = "/medias/{media_id}"
        let mediaIdPreEscape = "\(mediaId)"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{media_id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Media

     - parameter mediaId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readMediaMediasMediaIdGet(mediaId: Int, completion: @escaping ((_ data: MediaRead?,_ error: Error?) -> Void)) {
        readMediaMediasMediaIdGetWithRequestBuilder(mediaId: mediaId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Media
     - GET /medias/{media_id}
     - 

     - examples: [{contentType=application/json, example={
  "path" : "path",
  "access_type" : "access_type",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "content_type" : "content_type",
  "access_url" : "access_url",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 0
}}]
     - parameter mediaId: (path)  

     - returns: RequestBuilder<MediaRead> 
     */
    open class func readMediaMediasMediaIdGetWithRequestBuilder(mediaId: Int) -> RequestBuilder<MediaRead> {
        var path = "/medias/{media_id}"
        let mediaIdPreEscape = "\(mediaId)"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{media_id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MediaRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Read Medias

     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readMediasMediasGet(q: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [MediaRead]?,_ error: Error?) -> Void)) {
        readMediasMediasGetWithRequestBuilder(q: q, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read Medias
     - GET /medias

     - examples: [{contentType=application/json, example=[ {
  "path" : "path",
  "access_type" : "access_type",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "content_type" : "content_type",
  "access_url" : "access_url",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 0
}, {
  "path" : "path",
  "access_type" : "access_type",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "content_type" : "content_type",
  "access_url" : "access_url",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 0
} ]}]
     - parameter q: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)

     - returns: RequestBuilder<[MediaRead]> 
     */
    open class func readMediasMediasGetWithRequestBuilder(q: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[MediaRead]> {
        let path = "/medias"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[MediaRead]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update Media

     - parameter body: (body)  
     - parameter mediaId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMediaMediasMediaIdPatch(body: MediaUpdate, mediaId: Int, completion: @escaping ((_ data: MediaRead?,_ error: Error?) -> Void)) {
        updateMediaMediasMediaIdPatchWithRequestBuilder(body: body, mediaId: mediaId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Media
     - PATCH /medias/{media_id}
     - 

     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - examples: [{contentType=application/json, example={
  "path" : "path",
  "access_type" : "access_type",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "content_type" : "content_type",
  "access_url" : "access_url",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : 0
}}]
     - parameter body: (body)  
     - parameter mediaId: (path)  

     - returns: RequestBuilder<MediaRead> 
     */
    open class func updateMediaMediasMediaIdPatchWithRequestBuilder(body: MediaUpdate, mediaId: Int) -> RequestBuilder<MediaRead> {
        var path = "/medias/{media_id}"
        let mediaIdPreEscape = "\(mediaId)"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{media_id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MediaRead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
