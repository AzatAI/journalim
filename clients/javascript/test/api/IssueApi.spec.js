/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JbsBackendService);
  }
}(this, function(expect, JbsBackendService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JbsBackendService.IssueApi();
  });

  describe('(package)', function() {
    describe('IssueApi', function() {
      describe('createIssueIssuesPost', function() {
        it('should call createIssueIssuesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createIssueIssuesPost call and complete the assertions
          /*

          instance.createIssueIssuesPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createIssueLanguageIssueLanguagesPost', function() {
        it('should call createIssueLanguageIssueLanguagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createIssueLanguageIssueLanguagesPost call and complete the assertions
          /*

          instance.createIssueLanguageIssueLanguagesPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteIssueIssuesIssueIdDelete', function() {
        it('should call deleteIssueIssuesIssueIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteIssueIssuesIssueIdDelete call and complete the assertions
          /*

          instance.deleteIssueIssuesIssueIdDelete(issueId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete', function() {
        it('should call deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete call and complete the assertions
          /*

          instance.deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readIssueIssuesIssueIdGet', function() {
        it('should call readIssueIssuesIssueIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readIssueIssuesIssueIdGet call and complete the assertions
          /*

          instance.readIssueIssuesIssueIdGet(issueId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readIssueLanguageIssueLanguagesIssueLanguageIdGet', function() {
        it('should call readIssueLanguageIssueLanguagesIssueLanguageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readIssueLanguageIssueLanguagesIssueLanguageIdGet call and complete the assertions
          /*

          instance.readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readIssueLanguagesIssueLanguagesGet', function() {
        it('should call readIssueLanguagesIssueLanguagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readIssueLanguagesIssueLanguagesGet call and complete the assertions
          /*
          var opts = {};

          instance.readIssueLanguagesIssueLanguagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.IssueLanguageRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readIssuesIssuesGet', function() {
        it('should call readIssuesIssuesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readIssuesIssuesGet call and complete the assertions
          /*
          var opts = {};

          instance.readIssuesIssuesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.IssueRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateIssueIssuesIssueIdPatch', function() {
        it('should call updateIssueIssuesIssueIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateIssueIssuesIssueIdPatch call and complete the assertions
          /*

          instance.updateIssueIssuesIssueIdPatch(body, issueId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateIssueLanguageIssueLanguagesIssueLanguageIdPatch', function() {
        it('should call updateIssueLanguageIssueLanguagesIssueLanguageIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateIssueLanguageIssueLanguagesIssueLanguageIdPatch call and complete the assertions
          /*

          instance.updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.IssueLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
