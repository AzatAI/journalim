/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JbsBackendService);
  }
}(this, function(expect, JbsBackendService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JbsBackendService.PublicationApi();
  });

  describe('(package)', function() {
    describe('PublicationApi', function() {
      describe('createPublicationLanguagePublicationLanguagesPost', function() {
        it('should call createPublicationLanguagePublicationLanguagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createPublicationLanguagePublicationLanguagesPost call and complete the assertions
          /*

          instance.createPublicationLanguagePublicationLanguagesPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createPublicationPublicationsPost', function() {
        it('should call createPublicationPublicationsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createPublicationPublicationsPost call and complete the assertions
          /*

          instance.createPublicationPublicationsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete', function() {
        it('should call deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete call and complete the assertions
          /*

          instance.deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePublicationPublicationsPublicationIdDelete', function() {
        it('should call deletePublicationPublicationsPublicationIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePublicationPublicationsPublicationIdDelete call and complete the assertions
          /*

          instance.deletePublicationPublicationsPublicationIdDelete(publicationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet', function() {
        it('should call readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet call and complete the assertions
          /*

          instance.readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPublicationLanguagesPublicationLanguagesGet', function() {
        it('should call readPublicationLanguagesPublicationLanguagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPublicationLanguagesPublicationLanguagesGet call and complete the assertions
          /*
          var opts = {};

          instance.readPublicationLanguagesPublicationLanguagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.PublicationLanguageRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPublicationPublicationsPublicationIdGet', function() {
        it('should call readPublicationPublicationsPublicationIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPublicationPublicationsPublicationIdGet call and complete the assertions
          /*

          instance.readPublicationPublicationsPublicationIdGet(publicationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPublicationsPublicationsGet', function() {
        it('should call readPublicationsPublicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPublicationsPublicationsGet call and complete the assertions
          /*
          var opts = {};

          instance.readPublicationsPublicationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.PublicationRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch', function() {
        it('should call updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch call and complete the assertions
          /*

          instance.updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePublicationPublicationsPublicationIdPatch', function() {
        it('should call updatePublicationPublicationsPublicationIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePublicationPublicationsPublicationIdPatch call and complete the assertions
          /*

          instance.updatePublicationPublicationsPublicationIdPatch(body, publicationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PublicationRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
