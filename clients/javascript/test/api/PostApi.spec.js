/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JbsBackendService);
  }
}(this, function(expect, JbsBackendService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JbsBackendService.PostApi();
  });

  describe('(package)', function() {
    describe('PostApi', function() {
      describe('createPostLanguagePostLanguagesPost', function() {
        it('should call createPostLanguagePostLanguagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createPostLanguagePostLanguagesPost call and complete the assertions
          /*

          instance.createPostLanguagePostLanguagesPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createPostPostsPost', function() {
        it('should call createPostPostsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createPostPostsPost call and complete the assertions
          /*

          instance.createPostPostsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePostLanguagePostLanguagesPostLanguageIdDelete', function() {
        it('should call deletePostLanguagePostLanguagesPostLanguageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePostLanguagePostLanguagesPostLanguageIdDelete call and complete the assertions
          /*

          instance.deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePostPostsPostIdDelete', function() {
        it('should call deletePostPostsPostIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePostPostsPostIdDelete call and complete the assertions
          /*

          instance.deletePostPostsPostIdDelete(postId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.SuccessResponseModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPostLanguagePostLanguagesPostLanguageIdGet', function() {
        it('should call readPostLanguagePostLanguagesPostLanguageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPostLanguagePostLanguagesPostLanguageIdGet call and complete the assertions
          /*

          instance.readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPostLanguagesPostLanguagesGet', function() {
        it('should call readPostLanguagesPostLanguagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPostLanguagesPostLanguagesGet call and complete the assertions
          /*
          var opts = {};

          instance.readPostLanguagesPostLanguagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.PostLanguageRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPostPostsPostIdGet', function() {
        it('should call readPostPostsPostIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPostPostsPostIdGet call and complete the assertions
          /*

          instance.readPostPostsPostIdGet(postId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readPostsPostsGet', function() {
        it('should call readPostsPostsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readPostsPostsGet call and complete the assertions
          /*
          var opts = {};

          instance.readPostsPostsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(JbsBackendService.PostRead);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePostLanguagePostLanguagesPostLanguageIdPatch', function() {
        it('should call updatePostLanguagePostLanguagesPostLanguageIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePostLanguagePostLanguagesPostLanguageIdPatch call and complete the assertions
          /*

          instance.updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostLanguageRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePostPostsPostIdPatch', function() {
        it('should call updatePostPostsPostIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePostPostsPostIdPatch call and complete the assertions
          /*

          instance.updatePostPostsPostIdPatch(body, postId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(JbsBackendService.PostRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
