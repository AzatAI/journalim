/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseModel} from '../model/ErrorResponseModel';
import {GenericFileUploadResponse} from '../model/GenericFileUploadResponse';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {MediaRead} from '../model/MediaRead';
import {MediaUpdate} from '../model/MediaUpdate';
import {SuccessResponseModel} from '../model/SuccessResponseModel';

/**
* Media service.
* @module api/MediaApi
* @version 0.0.1
*/
export class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createUploadUploadPost operation.
     * @callback moduleapi/MediaApi~createUploadUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericFileUploadResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Upload
     * Upload a file to the server.   This file later can be served to user either publicly or privately(for signed-in users only)   Hints: Private files can be used for creating new issue attachments (PDFs)!   &lt;span style:\&quot;color:red\&quot;&gt;WARN&lt;/span&gt; : Uploading files with same filename might overwrite the existing files.
     * @param {Blob} file 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._public  (default to <.>)
     * @param {module:api/MediaApi~createUploadUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createUploadUploadPost(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createUploadUploadPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'public': opts['_public']
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GenericFileUploadResponse;

      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteMediaMediasMediaIdDelete operation.
     * @callback moduleapi/MediaApi~deleteMediaMediasMediaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Media
     * @param {Number} mediaId 
     * @param {module:api/MediaApi~deleteMediaMediasMediaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteMediaMediasMediaIdDelete(mediaId, callback) {
      
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling deleteMediaMediasMediaIdDelete");
      }

      let pathParams = {
        'media_id': mediaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/medias/{media_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readMediaMediasMediaIdGet operation.
     * @callback moduleapi/MediaApi~readMediaMediasMediaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Media
     * @param {Number} mediaId 
     * @param {module:api/MediaApi~readMediaMediasMediaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readMediaMediasMediaIdGet(mediaId, callback) {
      
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling readMediaMediasMediaIdGet");
      }

      let pathParams = {
        'media_id': mediaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaRead;

      return this.apiClient.callApi(
        '/medias/{media_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readMediasMediasGet operation.
     * @callback moduleapi/MediaApi~readMediasMediasGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Medias
     * Get all Media.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/MediaApi~readMediasMediasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readMediasMediasGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaRead];

      return this.apiClient.callApi(
        '/medias', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateMediaMediasMediaIdPatch operation.
     * @callback moduleapi/MediaApi~updateMediaMediasMediaIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Media
     * @param {module:model/MediaUpdate} body 
     * @param {Number} mediaId 
     * @param {module:api/MediaApi~updateMediaMediasMediaIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateMediaMediasMediaIdPatch(body, mediaId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMediaMediasMediaIdPatch");
      }
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling updateMediaMediasMediaIdPatch");
      }

      let pathParams = {
        'media_id': mediaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaRead;

      return this.apiClient.callApi(
        '/medias/{media_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}