/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseModel} from '../model/ErrorResponseModel';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {PageCreate} from '../model/PageCreate';
import {PageLanguageCreate} from '../model/PageLanguageCreate';
import {PageLanguageRead} from '../model/PageLanguageRead';
import {PageLanguageUpdate} from '../model/PageLanguageUpdate';
import {PageRead} from '../model/PageRead';
import {PageUpdate} from '../model/PageUpdate';
import {SuccessResponseModel} from '../model/SuccessResponseModel';

/**
* Page service.
* @module api/PageApi
* @version 0.0.1
*/
export class PageApi {

    /**
    * Constructs a new PageApi. 
    * @alias module:api/PageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPageLanguagePageLanguagesPost operation.
     * @callback moduleapi/PageApi~createPageLanguagePageLanguagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Page Language
     * Create a PageLanguage.
     * @param {module:model/PageLanguageCreate} body 
     * @param {module:api/PageApi~createPageLanguagePageLanguagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPageLanguagePageLanguagesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPageLanguagePageLanguagesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageLanguageRead;

      return this.apiClient.callApi(
        '/page_languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPagePagesPost operation.
     * @callback moduleapi/PageApi~createPagePagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Page
     * Create a Page.
     * @param {module:model/PageCreate} body 
     * @param {module:api/PageApi~createPagePagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPagePagesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPagePagesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageRead;

      return this.apiClient.callApi(
        '/pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePageLanguagePageLanguagesPageLanguageIdDelete operation.
     * @callback moduleapi/PageApi~deletePageLanguagePageLanguagesPageLanguageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Page Language
     * @param {Number} pageLanguageId 
     * @param {module:api/PageApi~deletePageLanguagePageLanguagesPageLanguageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pageLanguageId' is set
      if (pageLanguageId === undefined || pageLanguageId === null) {
        throw new Error("Missing the required parameter 'pageLanguageId' when calling deletePageLanguagePageLanguagesPageLanguageIdDelete");
      }

      let pathParams = {
        'page_language_id': pageLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/page_languages/{page_language_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePagePagesPageIdDelete operation.
     * @callback moduleapi/PageApi~deletePagePagesPageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Page
     * @param {Number} pageId 
     * @param {module:api/PageApi~deletePagePagesPageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePagePagesPageIdDelete(pageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling deletePagePagesPageIdDelete");
      }

      let pathParams = {
        'page_id': pageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/pages/{page_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPageLanguagePageLanguagesPageLanguageIdGet operation.
     * @callback moduleapi/PageApi~readPageLanguagePageLanguagesPageLanguageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Page Language
     * @param {Number} pageLanguageId 
     * @param {module:api/PageApi~readPageLanguagePageLanguagesPageLanguageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pageLanguageId' is set
      if (pageLanguageId === undefined || pageLanguageId === null) {
        throw new Error("Missing the required parameter 'pageLanguageId' when calling readPageLanguagePageLanguagesPageLanguageIdGet");
      }

      let pathParams = {
        'page_language_id': pageLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageLanguageRead;

      return this.apiClient.callApi(
        '/page_languages/{page_language_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPageLanguagesPageLanguagesGet operation.
     * @callback moduleapi/PageApi~readPageLanguagesPageLanguagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageLanguageRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Page Languages
     * Get all PageLanguage.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PageApi~readPageLanguagesPageLanguagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPageLanguagesPageLanguagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageLanguageRead];

      return this.apiClient.callApi(
        '/page_languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPagePagesPageIdGet operation.
     * @callback moduleapi/PageApi~readPagePagesPageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Page
     * @param {Number} pageId 
     * @param {module:api/PageApi~readPagePagesPageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPagePagesPageIdGet(pageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling readPagePagesPageIdGet");
      }

      let pathParams = {
        'page_id': pageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageRead;

      return this.apiClient.callApi(
        '/pages/{page_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPagesPagesGet operation.
     * @callback moduleapi/PageApi~readPagesPagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PageRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Pages
     * Get all Page.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PageApi~readPagesPagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPagesPagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PageRead];

      return this.apiClient.callApi(
        '/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePageLanguagePageLanguagesPageLanguageIdPatch operation.
     * @callback moduleapi/PageApi~updatePageLanguagePageLanguagesPageLanguageIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Page Language
     * @param {module:model/PageLanguageUpdate} body 
     * @param {Number} pageLanguageId 
     * @param {module:api/PageApi~updatePageLanguagePageLanguagesPageLanguageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePageLanguagePageLanguagesPageLanguageIdPatch");
      }
      // verify the required parameter 'pageLanguageId' is set
      if (pageLanguageId === undefined || pageLanguageId === null) {
        throw new Error("Missing the required parameter 'pageLanguageId' when calling updatePageLanguagePageLanguagesPageLanguageIdPatch");
      }

      let pathParams = {
        'page_language_id': pageLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageLanguageRead;

      return this.apiClient.callApi(
        '/page_languages/{page_language_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePagePagesPageIdPatch operation.
     * @callback moduleapi/PageApi~updatePagePagesPageIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Page
     * @param {module:model/PageUpdate} body 
     * @param {Number} pageId 
     * @param {module:api/PageApi~updatePagePagesPageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePagePagesPageIdPatch(body, pageId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePagePagesPageIdPatch");
      }
      // verify the required parameter 'pageId' is set
      if (pageId === undefined || pageId === null) {
        throw new Error("Missing the required parameter 'pageId' when calling updatePagePagesPageIdPatch");
      }

      let pathParams = {
        'page_id': pageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PageRead;

      return this.apiClient.callApi(
        '/pages/{page_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}