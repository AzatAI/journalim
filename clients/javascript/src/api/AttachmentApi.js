/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AttachmentCreate} from '../model/AttachmentCreate';
import {AttachmentRead} from '../model/AttachmentRead';
import {AttachmentUpdate} from '../model/AttachmentUpdate';
import {ErrorResponseModel} from '../model/ErrorResponseModel';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {SuccessResponseModel} from '../model/SuccessResponseModel';

/**
* Attachment service.
* @module api/AttachmentApi
* @version 0.0.1
*/
export class AttachmentApi {

    /**
    * Constructs a new AttachmentApi. 
    * @alias module:api/AttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createAttachmentAttachmentsPost operation.
     * @callback moduleapi/AttachmentApi~createAttachmentAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Attachment
     * Create a Attachment.
     * @param {module:model/AttachmentCreate} body 
     * @param {module:api/AttachmentApi~createAttachmentAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createAttachmentAttachmentsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAttachmentAttachmentsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentRead;

      return this.apiClient.callApi(
        '/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAttachmentAttachmentsAttachmentIdDelete operation.
     * @callback moduleapi/AttachmentApi~deleteAttachmentAttachmentsAttachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Attachment
     * @param {Number} attachmentId 
     * @param {module:api/AttachmentApi~deleteAttachmentAttachmentsAttachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteAttachmentAttachmentsAttachmentIdDelete(attachmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling deleteAttachmentAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAttachmentAttachmentsAttachmentIdGet operation.
     * @callback moduleapi/AttachmentApi~readAttachmentAttachmentsAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Attachment
     * @param {Number} attachmentId 
     * @param {module:api/AttachmentApi~readAttachmentAttachmentsAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAttachmentAttachmentsAttachmentIdGet(attachmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling readAttachmentAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentRead;

      return this.apiClient.callApi(
        '/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAttachmentsAttachmentsGet operation.
     * @callback moduleapi/AttachmentApi~readAttachmentsAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttachmentRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Attachments
     * Get all Attachment.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/AttachmentApi~readAttachmentsAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAttachmentsAttachmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttachmentRead];

      return this.apiClient.callApi(
        '/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAttachmentAttachmentsAttachmentIdPatch operation.
     * @callback moduleapi/AttachmentApi~updateAttachmentAttachmentsAttachmentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Attachment
     * @param {module:model/AttachmentUpdate} body 
     * @param {Number} attachmentId 
     * @param {module:api/AttachmentApi~updateAttachmentAttachmentsAttachmentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateAttachmentAttachmentsAttachmentIdPatch(body, attachmentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttachmentAttachmentsAttachmentIdPatch");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling updateAttachmentAttachmentsAttachmentIdPatch");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentRead;

      return this.apiClient.callApi(
        '/attachments/{attachment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}