/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseModel} from '../model/ErrorResponseModel';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {PostCreate} from '../model/PostCreate';
import {PostLanguageCreate} from '../model/PostLanguageCreate';
import {PostLanguageRead} from '../model/PostLanguageRead';
import {PostLanguageUpdate} from '../model/PostLanguageUpdate';
import {PostRead} from '../model/PostRead';
import {PostUpdate} from '../model/PostUpdate';
import {SuccessResponseModel} from '../model/SuccessResponseModel';

/**
* Post service.
* @module api/PostApi
* @version 0.0.1
*/
export class PostApi {

    /**
    * Constructs a new PostApi. 
    * @alias module:api/PostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPostLanguagePostLanguagesPost operation.
     * @callback moduleapi/PostApi~createPostLanguagePostLanguagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Post Language
     * Create a PostLanguage.
     * @param {module:model/PostLanguageCreate} body 
     * @param {module:api/PostApi~createPostLanguagePostLanguagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPostLanguagePostLanguagesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPostLanguagePostLanguagesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostLanguageRead;

      return this.apiClient.callApi(
        '/post_languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPostPostsPost operation.
     * @callback moduleapi/PostApi~createPostPostsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Post
     * Create a Post.
     * @param {module:model/PostCreate} body 
     * @param {module:api/PostApi~createPostPostsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPostPostsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPostPostsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostRead;

      return this.apiClient.callApi(
        '/posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePostLanguagePostLanguagesPostLanguageIdDelete operation.
     * @callback moduleapi/PostApi~deletePostLanguagePostLanguagesPostLanguageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Post Language
     * @param {Number} postLanguageId 
     * @param {module:api/PostApi~deletePostLanguagePostLanguagesPostLanguageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'postLanguageId' is set
      if (postLanguageId === undefined || postLanguageId === null) {
        throw new Error("Missing the required parameter 'postLanguageId' when calling deletePostLanguagePostLanguagesPostLanguageIdDelete");
      }

      let pathParams = {
        'post_language_id': postLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/post_languages/{post_language_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePostPostsPostIdDelete operation.
     * @callback moduleapi/PostApi~deletePostPostsPostIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Post
     * @param {Number} postId 
     * @param {module:api/PostApi~deletePostPostsPostIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePostPostsPostIdDelete(postId, callback) {
      
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling deletePostPostsPostIdDelete");
      }

      let pathParams = {
        'post_id': postId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/posts/{post_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPostLanguagePostLanguagesPostLanguageIdGet operation.
     * @callback moduleapi/PostApi~readPostLanguagePostLanguagesPostLanguageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Post Language
     * @param {Number} postLanguageId 
     * @param {module:api/PostApi~readPostLanguagePostLanguagesPostLanguageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'postLanguageId' is set
      if (postLanguageId === undefined || postLanguageId === null) {
        throw new Error("Missing the required parameter 'postLanguageId' when calling readPostLanguagePostLanguagesPostLanguageIdGet");
      }

      let pathParams = {
        'post_language_id': postLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostLanguageRead;

      return this.apiClient.callApi(
        '/post_languages/{post_language_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPostLanguagesPostLanguagesGet operation.
     * @callback moduleapi/PostApi~readPostLanguagesPostLanguagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostLanguageRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Post Languages
     * Get all PostLanguage.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PostApi~readPostLanguagesPostLanguagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPostLanguagesPostLanguagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PostLanguageRead];

      return this.apiClient.callApi(
        '/post_languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPostPostsPostIdGet operation.
     * @callback moduleapi/PostApi~readPostPostsPostIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Post
     * @param {Number} postId 
     * @param {module:api/PostApi~readPostPostsPostIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPostPostsPostIdGet(postId, callback) {
      
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling readPostPostsPostIdGet");
      }

      let pathParams = {
        'post_id': postId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostRead;

      return this.apiClient.callApi(
        '/posts/{post_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPostsPostsGet operation.
     * @callback moduleapi/PostApi~readPostsPostsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Posts
     * Get all Post.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PostApi~readPostsPostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPostsPostsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PostRead];

      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePostLanguagePostLanguagesPostLanguageIdPatch operation.
     * @callback moduleapi/PostApi~updatePostLanguagePostLanguagesPostLanguageIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Post Language
     * @param {module:model/PostLanguageUpdate} body 
     * @param {Number} postLanguageId 
     * @param {module:api/PostApi~updatePostLanguagePostLanguagesPostLanguageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePostLanguagePostLanguagesPostLanguageIdPatch");
      }
      // verify the required parameter 'postLanguageId' is set
      if (postLanguageId === undefined || postLanguageId === null) {
        throw new Error("Missing the required parameter 'postLanguageId' when calling updatePostLanguagePostLanguagesPostLanguageIdPatch");
      }

      let pathParams = {
        'post_language_id': postLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostLanguageRead;

      return this.apiClient.callApi(
        '/post_languages/{post_language_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePostPostsPostIdPatch operation.
     * @callback moduleapi/PostApi~updatePostPostsPostIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Post
     * @param {module:model/PostUpdate} body 
     * @param {Number} postId 
     * @param {module:api/PostApi~updatePostPostsPostIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePostPostsPostIdPatch(body, postId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePostPostsPostIdPatch");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling updatePostPostsPostIdPatch");
      }

      let pathParams = {
        'post_id': postId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostRead;

      return this.apiClient.callApi(
        '/posts/{post_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}