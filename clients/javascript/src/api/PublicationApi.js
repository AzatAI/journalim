/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseModel} from '../model/ErrorResponseModel';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {PublicationCreate} from '../model/PublicationCreate';
import {PublicationLanguageCreate} from '../model/PublicationLanguageCreate';
import {PublicationLanguageRead} from '../model/PublicationLanguageRead';
import {PublicationLanguageUpdate} from '../model/PublicationLanguageUpdate';
import {PublicationRead} from '../model/PublicationRead';
import {PublicationUpdate} from '../model/PublicationUpdate';
import {SuccessResponseModel} from '../model/SuccessResponseModel';

/**
* Publication service.
* @module api/PublicationApi
* @version 0.0.1
*/
export class PublicationApi {

    /**
    * Constructs a new PublicationApi. 
    * @alias module:api/PublicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPublicationLanguagePublicationLanguagesPost operation.
     * @callback moduleapi/PublicationApi~createPublicationLanguagePublicationLanguagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Publication Language
     * Create a PublicationLanguage.
     * @param {module:model/PublicationLanguageCreate} body 
     * @param {module:api/PublicationApi~createPublicationLanguagePublicationLanguagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPublicationLanguagePublicationLanguagesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPublicationLanguagePublicationLanguagesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicationLanguageRead;

      return this.apiClient.callApi(
        '/publication_languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPublicationPublicationsPost operation.
     * @callback moduleapi/PublicationApi~createPublicationPublicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Publication
     * Create a Publication.
     * @param {module:model/PublicationCreate} body 
     * @param {module:api/PublicationApi~createPublicationPublicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPublicationPublicationsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPublicationPublicationsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicationRead;

      return this.apiClient.callApi(
        '/publications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete operation.
     * @callback moduleapi/PublicationApi~deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Publication Language
     * @param {Number} publicationLanguageId 
     * @param {module:api/PublicationApi~deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'publicationLanguageId' is set
      if (publicationLanguageId === undefined || publicationLanguageId === null) {
        throw new Error("Missing the required parameter 'publicationLanguageId' when calling deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete");
      }

      let pathParams = {
        'publication_language_id': publicationLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/publication_languages/{publication_language_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePublicationPublicationsPublicationIdDelete operation.
     * @callback moduleapi/PublicationApi~deletePublicationPublicationsPublicationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Publication
     * @param {Number} publicationId 
     * @param {module:api/PublicationApi~deletePublicationPublicationsPublicationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePublicationPublicationsPublicationIdDelete(publicationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'publicationId' is set
      if (publicationId === undefined || publicationId === null) {
        throw new Error("Missing the required parameter 'publicationId' when calling deletePublicationPublicationsPublicationIdDelete");
      }

      let pathParams = {
        'publication_id': publicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponseModel;

      return this.apiClient.callApi(
        '/publications/{publication_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet operation.
     * @callback moduleapi/PublicationApi~readPublicationLanguagePublicationLanguagesPublicationLanguageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Publication Language
     * @param {Number} publicationLanguageId 
     * @param {module:api/PublicationApi~readPublicationLanguagePublicationLanguagesPublicationLanguageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'publicationLanguageId' is set
      if (publicationLanguageId === undefined || publicationLanguageId === null) {
        throw new Error("Missing the required parameter 'publicationLanguageId' when calling readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet");
      }

      let pathParams = {
        'publication_language_id': publicationLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicationLanguageRead;

      return this.apiClient.callApi(
        '/publication_languages/{publication_language_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPublicationLanguagesPublicationLanguagesGet operation.
     * @callback moduleapi/PublicationApi~readPublicationLanguagesPublicationLanguagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicationLanguageRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Publication Languages
     * Get all PublicationLanguage.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PublicationApi~readPublicationLanguagesPublicationLanguagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPublicationLanguagesPublicationLanguagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicationLanguageRead];

      return this.apiClient.callApi(
        '/publication_languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPublicationPublicationsPublicationIdGet operation.
     * @callback moduleapi/PublicationApi~readPublicationPublicationsPublicationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Publication
     * @param {Number} publicationId 
     * @param {module:api/PublicationApi~readPublicationPublicationsPublicationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPublicationPublicationsPublicationIdGet(publicationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'publicationId' is set
      if (publicationId === undefined || publicationId === null) {
        throw new Error("Missing the required parameter 'publicationId' when calling readPublicationPublicationsPublicationIdGet");
      }

      let pathParams = {
        'publication_id': publicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicationRead;

      return this.apiClient.callApi(
        '/publications/{publication_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPublicationsPublicationsGet operation.
     * @callback moduleapi/PublicationApi~readPublicationsPublicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicationRead>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Publications
     * Get all Publication.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {Number} opts.offset  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/PublicationApi~readPublicationsPublicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPublicationsPublicationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicationRead];

      return this.apiClient.callApi(
        '/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch operation.
     * @callback moduleapi/PublicationApi~updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationLanguageRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Publication Language
     * @param {module:model/PublicationLanguageUpdate} body 
     * @param {Number} publicationLanguageId 
     * @param {module:api/PublicationApi~updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch");
      }
      // verify the required parameter 'publicationLanguageId' is set
      if (publicationLanguageId === undefined || publicationLanguageId === null) {
        throw new Error("Missing the required parameter 'publicationLanguageId' when calling updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch");
      }

      let pathParams = {
        'publication_language_id': publicationLanguageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicationLanguageRead;

      return this.apiClient.callApi(
        '/publication_languages/{publication_language_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePublicationPublicationsPublicationIdPatch operation.
     * @callback moduleapi/PublicationApi~updatePublicationPublicationsPublicationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Publication
     * @param {module:model/PublicationUpdate} body 
     * @param {Number} publicationId 
     * @param {module:api/PublicationApi~updatePublicationPublicationsPublicationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePublicationPublicationsPublicationIdPatch(body, publicationId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePublicationPublicationsPublicationIdPatch");
      }
      // verify the required parameter 'publicationId' is set
      if (publicationId === undefined || publicationId === null) {
        throw new Error("Missing the required parameter 'publicationId' when calling updatePublicationPublicationsPublicationIdPatch");
      }

      let pathParams = {
        'publication_id': publicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicationRead;

      return this.apiClient.callApi(
        '/publications/{publication_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}