/* tslint:disable */
/* eslint-disable */
/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponseModel } from '../models';
import { HTTPValidationError } from '../models';
import { PublicationCreate } from '../models';
import { PublicationLanguageCreate } from '../models';
import { PublicationLanguageRead } from '../models';
import { PublicationLanguageUpdate } from '../models';
import { PublicationRead } from '../models';
import { PublicationUpdate } from '../models';
import { SuccessResponseModel } from '../models';
/**
 * PublicationApi - axios parameter creator
 * @export
 */
export const PublicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a PublicationLanguage.
         * @summary Create Publication Language
         * @param {PublicationLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicationLanguagePublicationLanguagesPost: async (body: PublicationLanguageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPublicationLanguagePublicationLanguagesPost.');
            }
            const localVarPath = `/publication_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Publication.
         * @summary Create Publication
         * @param {PublicationCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicationPublicationsPost: async (body: PublicationCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPublicationPublicationsPost.');
            }
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete: async (publicationLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicationLanguageId' is not null or undefined
            if (publicationLanguageId === null || publicationLanguageId === undefined) {
                throw new RequiredError('publicationLanguageId','Required parameter publicationLanguageId was null or undefined when calling deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete.');
            }
            const localVarPath = `/publication_languages/{publication_language_id}`
                .replace(`{${"publication_language_id"}}`, encodeURIComponent(String(publicationLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicationPublicationsPublicationIdDelete: async (publicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicationId' is not null or undefined
            if (publicationId === null || publicationId === undefined) {
                throw new RequiredError('publicationId','Required parameter publicationId was null or undefined when calling deletePublicationPublicationsPublicationIdDelete.');
            }
            const localVarPath = `/publications/{publication_id}`
                .replace(`{${"publication_id"}}`, encodeURIComponent(String(publicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet: async (publicationLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicationLanguageId' is not null or undefined
            if (publicationLanguageId === null || publicationLanguageId === undefined) {
                throw new RequiredError('publicationLanguageId','Required parameter publicationLanguageId was null or undefined when calling readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet.');
            }
            const localVarPath = `/publication_languages/{publication_language_id}`
                .replace(`{${"publication_language_id"}}`, encodeURIComponent(String(publicationLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all PublicationLanguage.
         * @summary Read Publication Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPublicationLanguagesPublicationLanguagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publication_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPublicationPublicationsPublicationIdGet: async (publicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicationId' is not null or undefined
            if (publicationId === null || publicationId === undefined) {
                throw new RequiredError('publicationId','Required parameter publicationId was null or undefined when calling readPublicationPublicationsPublicationIdGet.');
            }
            const localVarPath = `/publications/{publication_id}`
                .replace(`{${"publication_id"}}`, encodeURIComponent(String(publicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Publication.
         * @summary Read Publications
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPublicationsPublicationsGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Publication Language
         * @param {PublicationLanguageUpdate} body 
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch: async (body: PublicationLanguageUpdate, publicationLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch.');
            }
            // verify required parameter 'publicationLanguageId' is not null or undefined
            if (publicationLanguageId === null || publicationLanguageId === undefined) {
                throw new RequiredError('publicationLanguageId','Required parameter publicationLanguageId was null or undefined when calling updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch.');
            }
            const localVarPath = `/publication_languages/{publication_language_id}`
                .replace(`{${"publication_language_id"}}`, encodeURIComponent(String(publicationLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Publication
         * @param {PublicationUpdate} body 
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationPublicationsPublicationIdPatch: async (body: PublicationUpdate, publicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePublicationPublicationsPublicationIdPatch.');
            }
            // verify required parameter 'publicationId' is not null or undefined
            if (publicationId === null || publicationId === undefined) {
                throw new RequiredError('publicationId','Required parameter publicationId was null or undefined when calling updatePublicationPublicationsPublicationIdPatch.');
            }
            const localVarPath = `/publications/{publication_id}`
                .replace(`{${"publication_id"}}`, encodeURIComponent(String(publicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicationApi - functional programming interface
 * @export
 */
export const PublicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a PublicationLanguage.
         * @summary Create Publication Language
         * @param {PublicationLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPublicationLanguagePublicationLanguagesPost(body: PublicationLanguageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationLanguageRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).createPublicationLanguagePublicationLanguagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Publication.
         * @summary Create Publication
         * @param {PublicationCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPublicationPublicationsPost(body: PublicationCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).createPublicationPublicationsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublicationPublicationsPublicationIdDelete(publicationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).deletePublicationPublicationsPublicationIdDelete(publicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationLanguageRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all PublicationLanguage.
         * @summary Read Publication Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationLanguagesPublicationLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PublicationLanguageRead>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).readPublicationLanguagesPublicationLanguagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationPublicationsPublicationIdGet(publicationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).readPublicationPublicationsPublicationIdGet(publicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Publication.
         * @summary Read Publications
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationsPublicationsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PublicationRead>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).readPublicationsPublicationsGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Publication Language
         * @param {PublicationLanguageUpdate} body 
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body: PublicationLanguageUpdate, publicationLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationLanguageRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Publication
         * @param {PublicationUpdate} body 
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationPublicationsPublicationIdPatch(body: PublicationUpdate, publicationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PublicationRead>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).updatePublicationPublicationsPublicationIdPatch(body, publicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicationApi - factory interface
 * @export
 */
export const PublicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a PublicationLanguage.
         * @summary Create Publication Language
         * @param {PublicationLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPublicationLanguagePublicationLanguagesPost(body: PublicationLanguageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationLanguageRead>> {
            return PublicationApiFp(configuration).createPublicationLanguagePublicationLanguagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Publication.
         * @summary Create Publication
         * @param {PublicationCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPublicationPublicationsPost(body: PublicationCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationRead>> {
            return PublicationApiFp(configuration).createPublicationPublicationsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PublicationApiFp(configuration).deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublicationPublicationsPublicationIdDelete(publicationId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PublicationApiFp(configuration).deletePublicationPublicationsPublicationIdDelete(publicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Publication Language
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationLanguageRead>> {
            return PublicationApiFp(configuration).readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all PublicationLanguage.
         * @summary Read Publication Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationLanguagesPublicationLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PublicationLanguageRead>>> {
            return PublicationApiFp(configuration).readPublicationLanguagesPublicationLanguagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Publication
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationPublicationsPublicationIdGet(publicationId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationRead>> {
            return PublicationApiFp(configuration).readPublicationPublicationsPublicationIdGet(publicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Publication.
         * @summary Read Publications
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPublicationsPublicationsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PublicationRead>>> {
            return PublicationApiFp(configuration).readPublicationsPublicationsGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Publication Language
         * @param {PublicationLanguageUpdate} body 
         * @param {number} publicationLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body: PublicationLanguageUpdate, publicationLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationLanguageRead>> {
            return PublicationApiFp(configuration).updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Publication
         * @param {PublicationUpdate} body 
         * @param {number} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationPublicationsPublicationIdPatch(body: PublicationUpdate, publicationId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PublicationRead>> {
            return PublicationApiFp(configuration).updatePublicationPublicationsPublicationIdPatch(body, publicationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicationApi - object-oriented interface
 * @export
 * @class PublicationApi
 * @extends {BaseAPI}
 */
export class PublicationApi extends BaseAPI {
    /**
     * Create a PublicationLanguage.
     * @summary Create Publication Language
     * @param {PublicationLanguageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async createPublicationLanguagePublicationLanguagesPost(body: PublicationLanguageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationLanguageRead>> {
        return PublicationApiFp(this.configuration).createPublicationLanguagePublicationLanguagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Publication.
     * @summary Create Publication
     * @param {PublicationCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async createPublicationPublicationsPost(body: PublicationCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationRead>> {
        return PublicationApiFp(this.configuration).createPublicationPublicationsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Publication Language
     * @param {number} publicationLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PublicationApiFp(this.configuration).deletePublicationLanguagePublicationLanguagesPublicationLanguageIdDelete(publicationLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Publication
     * @param {number} publicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async deletePublicationPublicationsPublicationIdDelete(publicationId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PublicationApiFp(this.configuration).deletePublicationPublicationsPublicationIdDelete(publicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Publication Language
     * @param {number} publicationLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationLanguageRead>> {
        return PublicationApiFp(this.configuration).readPublicationLanguagePublicationLanguagesPublicationLanguageIdGet(publicationLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all PublicationLanguage.
     * @summary Read Publication Languages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async readPublicationLanguagesPublicationLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PublicationLanguageRead>>> {
        return PublicationApiFp(this.configuration).readPublicationLanguagesPublicationLanguagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Publication
     * @param {number} publicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async readPublicationPublicationsPublicationIdGet(publicationId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationRead>> {
        return PublicationApiFp(this.configuration).readPublicationPublicationsPublicationIdGet(publicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Publication.
     * @summary Read Publications
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async readPublicationsPublicationsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PublicationRead>>> {
        return PublicationApiFp(this.configuration).readPublicationsPublicationsGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Publication Language
     * @param {PublicationLanguageUpdate} body 
     * @param {number} publicationLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body: PublicationLanguageUpdate, publicationLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationLanguageRead>> {
        return PublicationApiFp(this.configuration).updatePublicationLanguagePublicationLanguagesPublicationLanguageIdPatch(body, publicationLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Publication
     * @param {PublicationUpdate} body 
     * @param {number} publicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async updatePublicationPublicationsPublicationIdPatch(body: PublicationUpdate, publicationId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PublicationRead>> {
        return PublicationApiFp(this.configuration).updatePublicationPublicationsPublicationIdPatch(body, publicationId, options).then((request) => request(this.axios, this.basePath));
    }
}
