/* tslint:disable */
/* eslint-disable */
/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponseModel } from '../models';
import { HTTPValidationError } from '../models';
import { IssueCreate } from '../models';
import { IssueLanguageCreate } from '../models';
import { IssueLanguageRead } from '../models';
import { IssueLanguageUpdate } from '../models';
import { IssueRead } from '../models';
import { IssueUpdate } from '../models';
import { SuccessResponseModel } from '../models';
/**
 * IssueApi - axios parameter creator
 * @export
 */
export const IssueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Issue.
         * @summary Create Issue
         * @param {IssueCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueIssuesPost: async (body: IssueCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createIssueIssuesPost.');
            }
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a IssueLanguage.
         * @summary Create Issue Language
         * @param {IssueLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueLanguageIssueLanguagesPost: async (body: IssueLanguageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createIssueLanguageIssueLanguagesPost.');
            }
            const localVarPath = `/issue_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueIssuesIssueIdDelete: async (issueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueId' is not null or undefined
            if (issueId === null || issueId === undefined) {
                throw new RequiredError('issueId','Required parameter issueId was null or undefined when calling deleteIssueIssuesIssueIdDelete.');
            }
            const localVarPath = `/issues/{issue_id}`
                .replace(`{${"issue_id"}}`, encodeURIComponent(String(issueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete: async (issueLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueLanguageId' is not null or undefined
            if (issueLanguageId === null || issueLanguageId === undefined) {
                throw new RequiredError('issueLanguageId','Required parameter issueLanguageId was null or undefined when calling deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete.');
            }
            const localVarPath = `/issue_languages/{issue_language_id}`
                .replace(`{${"issue_language_id"}}`, encodeURIComponent(String(issueLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIssueIssuesIssueIdGet: async (issueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueId' is not null or undefined
            if (issueId === null || issueId === undefined) {
                throw new RequiredError('issueId','Required parameter issueId was null or undefined when calling readIssueIssuesIssueIdGet.');
            }
            const localVarPath = `/issues/{issue_id}`
                .replace(`{${"issue_id"}}`, encodeURIComponent(String(issueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIssueLanguageIssueLanguagesIssueLanguageIdGet: async (issueLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueLanguageId' is not null or undefined
            if (issueLanguageId === null || issueLanguageId === undefined) {
                throw new RequiredError('issueLanguageId','Required parameter issueLanguageId was null or undefined when calling readIssueLanguageIssueLanguagesIssueLanguageIdGet.');
            }
            const localVarPath = `/issue_languages/{issue_language_id}`
                .replace(`{${"issue_language_id"}}`, encodeURIComponent(String(issueLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all IssueLanguage.
         * @summary Read Issue Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIssueLanguagesIssueLanguagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issue_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Issue.
         * @summary Read Issues
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIssuesIssuesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Issue
         * @param {IssueUpdate} body 
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueIssuesIssueIdPatch: async (body: IssueUpdate, issueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIssueIssuesIssueIdPatch.');
            }
            // verify required parameter 'issueId' is not null or undefined
            if (issueId === null || issueId === undefined) {
                throw new RequiredError('issueId','Required parameter issueId was null or undefined when calling updateIssueIssuesIssueIdPatch.');
            }
            const localVarPath = `/issues/{issue_id}`
                .replace(`{${"issue_id"}}`, encodeURIComponent(String(issueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Issue Language
         * @param {IssueLanguageUpdate} body 
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueLanguageIssueLanguagesIssueLanguageIdPatch: async (body: IssueLanguageUpdate, issueLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIssueLanguageIssueLanguagesIssueLanguageIdPatch.');
            }
            // verify required parameter 'issueLanguageId' is not null or undefined
            if (issueLanguageId === null || issueLanguageId === undefined) {
                throw new RequiredError('issueLanguageId','Required parameter issueLanguageId was null or undefined when calling updateIssueLanguageIssueLanguagesIssueLanguageIdPatch.');
            }
            const localVarPath = `/issue_languages/{issue_language_id}`
                .replace(`{${"issue_language_id"}}`, encodeURIComponent(String(issueLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueApi - functional programming interface
 * @export
 */
export const IssueApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create an Issue.
         * @summary Create Issue
         * @param {IssueCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueIssuesPost(body: IssueCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).createIssueIssuesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a IssueLanguage.
         * @summary Create Issue Language
         * @param {IssueLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueLanguageIssueLanguagesPost(body: IssueLanguageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueLanguageRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).createIssueLanguageIssueLanguagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueIssuesIssueIdDelete(issueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).deleteIssueIssuesIssueIdDelete(issueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueIssuesIssueIdGet(issueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).readIssueIssuesIssueIdGet(issueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueLanguageRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all IssueLanguage.
         * @summary Read Issue Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueLanguagesIssueLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<IssueLanguageRead>>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).readIssueLanguagesIssueLanguagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Issue.
         * @summary Read Issues
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssuesIssuesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<IssueRead>>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).readIssuesIssuesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Issue
         * @param {IssueUpdate} body 
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueIssuesIssueIdPatch(body: IssueUpdate, issueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).updateIssueIssuesIssueIdPatch(body, issueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Issue Language
         * @param {IssueLanguageUpdate} body 
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body: IssueLanguageUpdate, issueLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IssueLanguageRead>>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IssueApi - factory interface
 * @export
 */
export const IssueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create an Issue.
         * @summary Create Issue
         * @param {IssueCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueIssuesPost(body: IssueCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueRead>> {
            return IssueApiFp(configuration).createIssueIssuesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a IssueLanguage.
         * @summary Create Issue Language
         * @param {IssueLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueLanguageIssueLanguagesPost(body: IssueLanguageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueLanguageRead>> {
            return IssueApiFp(configuration).createIssueLanguageIssueLanguagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueIssuesIssueIdDelete(issueId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return IssueApiFp(configuration).deleteIssueIssuesIssueIdDelete(issueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return IssueApiFp(configuration).deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Issue
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueIssuesIssueIdGet(issueId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueRead>> {
            return IssueApiFp(configuration).readIssueIssuesIssueIdGet(issueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Issue Language
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueLanguageRead>> {
            return IssueApiFp(configuration).readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all IssueLanguage.
         * @summary Read Issue Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssueLanguagesIssueLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<IssueLanguageRead>>> {
            return IssueApiFp(configuration).readIssueLanguagesIssueLanguagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Issue.
         * @summary Read Issues
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIssuesIssuesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<IssueRead>>> {
            return IssueApiFp(configuration).readIssuesIssuesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Issue
         * @param {IssueUpdate} body 
         * @param {number} issueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueIssuesIssueIdPatch(body: IssueUpdate, issueId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueRead>> {
            return IssueApiFp(configuration).updateIssueIssuesIssueIdPatch(body, issueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Issue Language
         * @param {IssueLanguageUpdate} body 
         * @param {number} issueLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body: IssueLanguageUpdate, issueLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<IssueLanguageRead>> {
            return IssueApiFp(configuration).updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueApi - object-oriented interface
 * @export
 * @class IssueApi
 * @extends {BaseAPI}
 */
export class IssueApi extends BaseAPI {
    /**
     * Create an Issue.
     * @summary Create Issue
     * @param {IssueCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async createIssueIssuesPost(body: IssueCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueRead>> {
        return IssueApiFp(this.configuration).createIssueIssuesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a IssueLanguage.
     * @summary Create Issue Language
     * @param {IssueLanguageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async createIssueLanguageIssueLanguagesPost(body: IssueLanguageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueLanguageRead>> {
        return IssueApiFp(this.configuration).createIssueLanguageIssueLanguagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Issue
     * @param {number} issueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async deleteIssueIssuesIssueIdDelete(issueId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return IssueApiFp(this.configuration).deleteIssueIssuesIssueIdDelete(issueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Issue Language
     * @param {number} issueLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return IssueApiFp(this.configuration).deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Issue
     * @param {number} issueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async readIssueIssuesIssueIdGet(issueId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueRead>> {
        return IssueApiFp(this.configuration).readIssueIssuesIssueIdGet(issueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Issue Language
     * @param {number} issueLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueLanguageRead>> {
        return IssueApiFp(this.configuration).readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all IssueLanguage.
     * @summary Read Issue Languages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async readIssueLanguagesIssueLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<IssueLanguageRead>>> {
        return IssueApiFp(this.configuration).readIssueLanguagesIssueLanguagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Issue.
     * @summary Read Issues
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async readIssuesIssuesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<IssueRead>>> {
        return IssueApiFp(this.configuration).readIssuesIssuesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Issue
     * @param {IssueUpdate} body 
     * @param {number} issueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async updateIssueIssuesIssueIdPatch(body: IssueUpdate, issueId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueRead>> {
        return IssueApiFp(this.configuration).updateIssueIssuesIssueIdPatch(body, issueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Issue Language
     * @param {IssueLanguageUpdate} body 
     * @param {number} issueLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public async updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body: IssueLanguageUpdate, issueLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<IssueLanguageRead>> {
        return IssueApiFp(this.configuration).updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
}
