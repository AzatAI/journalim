/* tslint:disable */
/* eslint-disable */
/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponseModel } from '../models';
import { HTTPValidationError } from '../models';
import { PostCreate } from '../models';
import { PostLanguageCreate } from '../models';
import { PostLanguageRead } from '../models';
import { PostLanguageUpdate } from '../models';
import { PostRead } from '../models';
import { PostUpdate } from '../models';
import { SuccessResponseModel } from '../models';
/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a PostLanguage.
         * @summary Create Post Language
         * @param {PostLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostLanguagePostLanguagesPost: async (body: PostLanguageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPostLanguagePostLanguagesPost.');
            }
            const localVarPath = `/post_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Post.
         * @summary Create Post
         * @param {PostCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostPostsPost: async (body: PostCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPostPostsPost.');
            }
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostLanguagePostLanguagesPostLanguageIdDelete: async (postLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postLanguageId' is not null or undefined
            if (postLanguageId === null || postLanguageId === undefined) {
                throw new RequiredError('postLanguageId','Required parameter postLanguageId was null or undefined when calling deletePostLanguagePostLanguagesPostLanguageIdDelete.');
            }
            const localVarPath = `/post_languages/{post_language_id}`
                .replace(`{${"post_language_id"}}`, encodeURIComponent(String(postLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostPostsPostIdDelete: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling deletePostPostsPostIdDelete.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostLanguagePostLanguagesPostLanguageIdGet: async (postLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postLanguageId' is not null or undefined
            if (postLanguageId === null || postLanguageId === undefined) {
                throw new RequiredError('postLanguageId','Required parameter postLanguageId was null or undefined when calling readPostLanguagePostLanguagesPostLanguageIdGet.');
            }
            const localVarPath = `/post_languages/{post_language_id}`
                .replace(`{${"post_language_id"}}`, encodeURIComponent(String(postLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all PostLanguage.
         * @summary Read Post Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostLanguagesPostLanguagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/post_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostPostsPostIdGet: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling readPostPostsPostIdGet.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Post.
         * @summary Read Posts
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPostsPostsGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Post Language
         * @param {PostLanguageUpdate} body 
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostLanguagePostLanguagesPostLanguageIdPatch: async (body: PostLanguageUpdate, postLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePostLanguagePostLanguagesPostLanguageIdPatch.');
            }
            // verify required parameter 'postLanguageId' is not null or undefined
            if (postLanguageId === null || postLanguageId === undefined) {
                throw new RequiredError('postLanguageId','Required parameter postLanguageId was null or undefined when calling updatePostLanguagePostLanguagesPostLanguageIdPatch.');
            }
            const localVarPath = `/post_languages/{post_language_id}`
                .replace(`{${"post_language_id"}}`, encodeURIComponent(String(postLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Post
         * @param {PostUpdate} body 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostPostsPostIdPatch: async (body: PostUpdate, postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePostPostsPostIdPatch.');
            }
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling updatePostPostsPostIdPatch.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a PostLanguage.
         * @summary Create Post Language
         * @param {PostLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostLanguagePostLanguagesPost(body: PostLanguageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostLanguageRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).createPostLanguagePostLanguagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Post.
         * @summary Create Post
         * @param {PostCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostPostsPost(body: PostCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).createPostPostsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostPostsPostIdDelete(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).deletePostPostsPostIdDelete(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostLanguageRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all PostLanguage.
         * @summary Read Post Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostLanguagesPostLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PostLanguageRead>>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).readPostLanguagesPostLanguagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostPostsPostIdGet(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).readPostPostsPostIdGet(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Post.
         * @summary Read Posts
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostsPostsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PostRead>>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).readPostsPostsGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Post Language
         * @param {PostLanguageUpdate} body 
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostLanguagePostLanguagesPostLanguageIdPatch(body: PostLanguageUpdate, postLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostLanguageRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Post
         * @param {PostUpdate} body 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostPostsPostIdPatch(body: PostUpdate, postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PostRead>>> {
            const localVarAxiosArgs = await PostApiAxiosParamCreator(configuration).updatePostPostsPostIdPatch(body, postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a PostLanguage.
         * @summary Create Post Language
         * @param {PostLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostLanguagePostLanguagesPost(body: PostLanguageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PostLanguageRead>> {
            return PostApiFp(configuration).createPostLanguagePostLanguagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Post.
         * @summary Create Post
         * @param {PostCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostPostsPost(body: PostCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PostRead>> {
            return PostApiFp(configuration).createPostPostsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PostApiFp(configuration).deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostPostsPostIdDelete(postId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PostApiFp(configuration).deletePostPostsPostIdDelete(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Post Language
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PostLanguageRead>> {
            return PostApiFp(configuration).readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all PostLanguage.
         * @summary Read Post Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostLanguagesPostLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PostLanguageRead>>> {
            return PostApiFp(configuration).readPostLanguagesPostLanguagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostPostsPostIdGet(postId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PostRead>> {
            return PostApiFp(configuration).readPostPostsPostIdGet(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Post.
         * @summary Read Posts
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPostsPostsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PostRead>>> {
            return PostApiFp(configuration).readPostsPostsGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Post Language
         * @param {PostLanguageUpdate} body 
         * @param {number} postLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostLanguagePostLanguagesPostLanguageIdPatch(body: PostLanguageUpdate, postLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PostLanguageRead>> {
            return PostApiFp(configuration).updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Post
         * @param {PostUpdate} body 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostPostsPostIdPatch(body: PostUpdate, postId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PostRead>> {
            return PostApiFp(configuration).updatePostPostsPostIdPatch(body, postId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * Create a PostLanguage.
     * @summary Create Post Language
     * @param {PostLanguageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async createPostLanguagePostLanguagesPost(body: PostLanguageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostLanguageRead>> {
        return PostApiFp(this.configuration).createPostLanguagePostLanguagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Post.
     * @summary Create Post
     * @param {PostCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async createPostPostsPost(body: PostCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostRead>> {
        return PostApiFp(this.configuration).createPostPostsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Post Language
     * @param {number} postLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PostApiFp(this.configuration).deletePostLanguagePostLanguagesPostLanguageIdDelete(postLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Post
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async deletePostPostsPostIdDelete(postId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PostApiFp(this.configuration).deletePostPostsPostIdDelete(postId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Post Language
     * @param {number} postLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostLanguageRead>> {
        return PostApiFp(this.configuration).readPostLanguagePostLanguagesPostLanguageIdGet(postLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all PostLanguage.
     * @summary Read Post Languages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async readPostLanguagesPostLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PostLanguageRead>>> {
        return PostApiFp(this.configuration).readPostLanguagesPostLanguagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Post
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async readPostPostsPostIdGet(postId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostRead>> {
        return PostApiFp(this.configuration).readPostPostsPostIdGet(postId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Post.
     * @summary Read Posts
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async readPostsPostsGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PostRead>>> {
        return PostApiFp(this.configuration).readPostsPostsGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Post Language
     * @param {PostLanguageUpdate} body 
     * @param {number} postLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async updatePostLanguagePostLanguagesPostLanguageIdPatch(body: PostLanguageUpdate, postLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostLanguageRead>> {
        return PostApiFp(this.configuration).updatePostLanguagePostLanguagesPostLanguageIdPatch(body, postLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Post
     * @param {PostUpdate} body 
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public async updatePostPostsPostIdPatch(body: PostUpdate, postId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PostRead>> {
        return PostApiFp(this.configuration).updatePostPostsPostIdPatch(body, postId, options).then((request) => request(this.axios, this.basePath));
    }
}
