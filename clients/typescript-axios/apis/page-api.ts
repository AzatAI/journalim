/* tslint:disable */
/* eslint-disable */
/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponseModel } from '../models';
import { HTTPValidationError } from '../models';
import { PageCreate } from '../models';
import { PageLanguageCreate } from '../models';
import { PageLanguageRead } from '../models';
import { PageLanguageUpdate } from '../models';
import { PageRead } from '../models';
import { PageUpdate } from '../models';
import { SuccessResponseModel } from '../models';
/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a PageLanguage.
         * @summary Create Page Language
         * @param {PageLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPageLanguagePageLanguagesPost: async (body: PageLanguageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPageLanguagePageLanguagesPost.');
            }
            const localVarPath = `/page_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Page.
         * @summary Create Page
         * @param {PageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPagePagesPost: async (body: PageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPagePagesPost.');
            }
            const localVarPath = `/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageLanguagePageLanguagesPageLanguageIdDelete: async (pageLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageLanguageId' is not null or undefined
            if (pageLanguageId === null || pageLanguageId === undefined) {
                throw new RequiredError('pageLanguageId','Required parameter pageLanguageId was null or undefined when calling deletePageLanguagePageLanguagesPageLanguageIdDelete.');
            }
            const localVarPath = `/page_languages/{page_language_id}`
                .replace(`{${"page_language_id"}}`, encodeURIComponent(String(pageLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePagePagesPageIdDelete: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling deletePagePagesPageIdDelete.');
            }
            const localVarPath = `/pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPageLanguagePageLanguagesPageLanguageIdGet: async (pageLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageLanguageId' is not null or undefined
            if (pageLanguageId === null || pageLanguageId === undefined) {
                throw new RequiredError('pageLanguageId','Required parameter pageLanguageId was null or undefined when calling readPageLanguagePageLanguagesPageLanguageIdGet.');
            }
            const localVarPath = `/page_languages/{page_language_id}`
                .replace(`{${"page_language_id"}}`, encodeURIComponent(String(pageLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all PageLanguage.
         * @summary Read Page Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPageLanguagesPageLanguagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/page_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPagePagesPageIdGet: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling readPagePagesPageIdGet.');
            }
            const localVarPath = `/pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Page.
         * @summary Read Pages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPagesPagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Page Language
         * @param {PageLanguageUpdate} body 
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageLanguagePageLanguagesPageLanguageIdPatch: async (body: PageLanguageUpdate, pageLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePageLanguagePageLanguagesPageLanguageIdPatch.');
            }
            // verify required parameter 'pageLanguageId' is not null or undefined
            if (pageLanguageId === null || pageLanguageId === undefined) {
                throw new RequiredError('pageLanguageId','Required parameter pageLanguageId was null or undefined when calling updatePageLanguagePageLanguagesPageLanguageIdPatch.');
            }
            const localVarPath = `/page_languages/{page_language_id}`
                .replace(`{${"page_language_id"}}`, encodeURIComponent(String(pageLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Page
         * @param {PageUpdate} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePagePagesPageIdPatch: async (body: PageUpdate, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePagePagesPageIdPatch.');
            }
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling updatePagePagesPageIdPatch.');
            }
            const localVarPath = `/pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a PageLanguage.
         * @summary Create Page Language
         * @param {PageLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPageLanguagePageLanguagesPost(body: PageLanguageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageLanguageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).createPageLanguagePageLanguagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Page.
         * @summary Create Page
         * @param {PageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPagePagesPost(body: PageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).createPagePagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePagePagesPageIdDelete(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).deletePagePagesPageIdDelete(pageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageLanguageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all PageLanguage.
         * @summary Read Page Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPageLanguagesPageLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PageLanguageRead>>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).readPageLanguagesPageLanguagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPagePagesPageIdGet(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).readPagePagesPageIdGet(pageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Page.
         * @summary Read Pages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPagesPagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PageRead>>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).readPagesPagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Page Language
         * @param {PageLanguageUpdate} body 
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageLanguagePageLanguagesPageLanguageIdPatch(body: PageLanguageUpdate, pageLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageLanguageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Page
         * @param {PageUpdate} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePagePagesPageIdPatch(body: PageUpdate, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageRead>>> {
            const localVarAxiosArgs = await PageApiAxiosParamCreator(configuration).updatePagePagesPageIdPatch(body, pageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a PageLanguage.
         * @summary Create Page Language
         * @param {PageLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPageLanguagePageLanguagesPost(body: PageLanguageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PageLanguageRead>> {
            return PageApiFp(configuration).createPageLanguagePageLanguagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Page.
         * @summary Create Page
         * @param {PageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPagePagesPost(body: PageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<PageRead>> {
            return PageApiFp(configuration).createPagePagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PageApiFp(configuration).deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePagePagesPageIdDelete(pageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return PageApiFp(configuration).deletePagePagesPageIdDelete(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Page Language
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageLanguageRead>> {
            return PageApiFp(configuration).readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all PageLanguage.
         * @summary Read Page Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPageLanguagesPageLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PageLanguageRead>>> {
            return PageApiFp(configuration).readPageLanguagesPageLanguagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Page
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPagePagesPageIdGet(pageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageRead>> {
            return PageApiFp(configuration).readPagePagesPageIdGet(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Page.
         * @summary Read Pages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPagesPagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PageRead>>> {
            return PageApiFp(configuration).readPagesPagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Page Language
         * @param {PageLanguageUpdate} body 
         * @param {number} pageLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageLanguagePageLanguagesPageLanguageIdPatch(body: PageLanguageUpdate, pageLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageLanguageRead>> {
            return PageApiFp(configuration).updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Page
         * @param {PageUpdate} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePagePagesPageIdPatch(body: PageUpdate, pageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageRead>> {
            return PageApiFp(configuration).updatePagePagesPageIdPatch(body, pageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * Create a PageLanguage.
     * @summary Create Page Language
     * @param {PageLanguageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async createPageLanguagePageLanguagesPost(body: PageLanguageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageLanguageRead>> {
        return PageApiFp(this.configuration).createPageLanguagePageLanguagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Page.
     * @summary Create Page
     * @param {PageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async createPagePagesPost(body: PageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageRead>> {
        return PageApiFp(this.configuration).createPagePagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Page Language
     * @param {number} pageLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PageApiFp(this.configuration).deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Page
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async deletePagePagesPageIdDelete(pageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return PageApiFp(this.configuration).deletePagePagesPageIdDelete(pageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Page Language
     * @param {number} pageLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageLanguageRead>> {
        return PageApiFp(this.configuration).readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all PageLanguage.
     * @summary Read Page Languages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async readPageLanguagesPageLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PageLanguageRead>>> {
        return PageApiFp(this.configuration).readPageLanguagesPageLanguagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Page
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async readPagePagesPageIdGet(pageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageRead>> {
        return PageApiFp(this.configuration).readPagePagesPageIdGet(pageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Page.
     * @summary Read Pages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async readPagesPagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PageRead>>> {
        return PageApiFp(this.configuration).readPagesPagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Page Language
     * @param {PageLanguageUpdate} body 
     * @param {number} pageLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async updatePageLanguagePageLanguagesPageLanguageIdPatch(body: PageLanguageUpdate, pageLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageLanguageRead>> {
        return PageApiFp(this.configuration).updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Page
     * @param {PageUpdate} body 
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public async updatePagePagesPageIdPatch(body: PageUpdate, pageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageRead>> {
        return PageApiFp(this.configuration).updatePagePagesPageIdPatch(body, pageId, options).then((request) => request(this.axios, this.basePath));
    }
}
