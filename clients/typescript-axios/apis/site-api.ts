/* tslint:disable */
/* eslint-disable */
/**
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponseModel } from '../models';
import { HTTPValidationError } from '../models';
import { SiteCreate } from '../models';
import { SiteLanguageCreate } from '../models';
import { SiteLanguageRead } from '../models';
import { SiteLanguageUpdate } from '../models';
import { SiteRead } from '../models';
import { SiteUpdate } from '../models';
import { SuccessResponseModel } from '../models';
/**
 * SiteApi - axios parameter creator
 * @export
 */
export const SiteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a SiteLanguage.
         * @summary Create Site Language
         * @param {SiteLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteLanguageSiteLanguagesPost: async (body: SiteLanguageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSiteLanguageSiteLanguagesPost.');
            }
            const localVarPath = `/site_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Site.
         * @summary Create Site
         * @param {SiteCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteSitesPost: async (body: SiteCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSiteSitesPost.');
            }
            const localVarPath = `/sites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete: async (siteLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteLanguageId' is not null or undefined
            if (siteLanguageId === null || siteLanguageId === undefined) {
                throw new RequiredError('siteLanguageId','Required parameter siteLanguageId was null or undefined when calling deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete.');
            }
            const localVarPath = `/site_languages/{site_language_id}`
                .replace(`{${"site_language_id"}}`, encodeURIComponent(String(siteLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteSitesSiteIdDelete: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId','Required parameter siteId was null or undefined when calling deleteSiteSitesSiteIdDelete.');
            }
            const localVarPath = `/sites/{site_id}`
                .replace(`{${"site_id"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSiteLanguageSiteLanguagesSiteLanguageIdGet: async (siteLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteLanguageId' is not null or undefined
            if (siteLanguageId === null || siteLanguageId === undefined) {
                throw new RequiredError('siteLanguageId','Required parameter siteLanguageId was null or undefined when calling readSiteLanguageSiteLanguagesSiteLanguageIdGet.');
            }
            const localVarPath = `/site_languages/{site_language_id}`
                .replace(`{${"site_language_id"}}`, encodeURIComponent(String(siteLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all SiteLanguage.
         * @summary Read Site Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSiteLanguagesSiteLanguagesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site_languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSiteSitesSiteIdGet: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId','Required parameter siteId was null or undefined when calling readSiteSitesSiteIdGet.');
            }
            const localVarPath = `/sites/{site_id}`
                .replace(`{${"site_id"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Site.
         * @summary Read Sites
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSitesSitesGet: async (q?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Site Language
         * @param {SiteLanguageUpdate} body 
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteLanguageSiteLanguagesSiteLanguageIdPatch: async (body: SiteLanguageUpdate, siteLanguageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSiteLanguageSiteLanguagesSiteLanguageIdPatch.');
            }
            // verify required parameter 'siteLanguageId' is not null or undefined
            if (siteLanguageId === null || siteLanguageId === undefined) {
                throw new RequiredError('siteLanguageId','Required parameter siteLanguageId was null or undefined when calling updateSiteLanguageSiteLanguagesSiteLanguageIdPatch.');
            }
            const localVarPath = `/site_languages/{site_language_id}`
                .replace(`{${"site_language_id"}}`, encodeURIComponent(String(siteLanguageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Site
         * @param {SiteUpdate} body 
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteSitesSiteIdPatch: async (body: SiteUpdate, siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSiteSitesSiteIdPatch.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId','Required parameter siteId was null or undefined when calling updateSiteSitesSiteIdPatch.');
            }
            const localVarPath = `/sites/{site_id}`
                .replace(`{${"site_id"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiteApi - functional programming interface
 * @export
 */
export const SiteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a SiteLanguage.
         * @summary Create Site Language
         * @param {SiteLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSiteLanguageSiteLanguagesPost(body: SiteLanguageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteLanguageRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).createSiteLanguageSiteLanguagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Site.
         * @summary Create Site
         * @param {SiteCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSiteSitesPost(body: SiteCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).createSiteSitesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSiteSitesSiteIdDelete(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessResponseModel>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).deleteSiteSitesSiteIdDelete(siteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteLanguageRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all SiteLanguage.
         * @summary Read Site Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteLanguagesSiteLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SiteLanguageRead>>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).readSiteLanguagesSiteLanguagesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteSitesSiteIdGet(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).readSiteSitesSiteIdGet(siteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Site.
         * @summary Read Sites
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSitesSitesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SiteRead>>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).readSitesSitesGet(q, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Site Language
         * @param {SiteLanguageUpdate} body 
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body: SiteLanguageUpdate, siteLanguageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteLanguageRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body, siteLanguageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Site
         * @param {SiteUpdate} body 
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSiteSitesSiteIdPatch(body: SiteUpdate, siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SiteRead>>> {
            const localVarAxiosArgs = await SiteApiAxiosParamCreator(configuration).updateSiteSitesSiteIdPatch(body, siteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SiteApi - factory interface
 * @export
 */
export const SiteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a SiteLanguage.
         * @summary Create Site Language
         * @param {SiteLanguageCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSiteLanguageSiteLanguagesPost(body: SiteLanguageCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteLanguageRead>> {
            return SiteApiFp(configuration).createSiteLanguageSiteLanguagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Site.
         * @summary Create Site
         * @param {SiteCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSiteSitesPost(body: SiteCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteRead>> {
            return SiteApiFp(configuration).createSiteSitesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return SiteApiFp(configuration).deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSiteSitesSiteIdDelete(siteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponseModel>> {
            return SiteApiFp(configuration).deleteSiteSitesSiteIdDelete(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Site Language
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteLanguageRead>> {
            return SiteApiFp(configuration).readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all SiteLanguage.
         * @summary Read Site Languages
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteLanguagesSiteLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SiteLanguageRead>>> {
            return SiteApiFp(configuration).readSiteLanguagesSiteLanguagesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Site
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSiteSitesSiteIdGet(siteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteRead>> {
            return SiteApiFp(configuration).readSiteSitesSiteIdGet(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Site.
         * @summary Read Sites
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSitesSitesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SiteRead>>> {
            return SiteApiFp(configuration).readSitesSitesGet(q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Site Language
         * @param {SiteLanguageUpdate} body 
         * @param {number} siteLanguageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body: SiteLanguageUpdate, siteLanguageId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteLanguageRead>> {
            return SiteApiFp(configuration).updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body, siteLanguageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Site
         * @param {SiteUpdate} body 
         * @param {number} siteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSiteSitesSiteIdPatch(body: SiteUpdate, siteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SiteRead>> {
            return SiteApiFp(configuration).updateSiteSitesSiteIdPatch(body, siteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiteApi - object-oriented interface
 * @export
 * @class SiteApi
 * @extends {BaseAPI}
 */
export class SiteApi extends BaseAPI {
    /**
     * Create a SiteLanguage.
     * @summary Create Site Language
     * @param {SiteLanguageCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async createSiteLanguageSiteLanguagesPost(body: SiteLanguageCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteLanguageRead>> {
        return SiteApiFp(this.configuration).createSiteLanguageSiteLanguagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Site.
     * @summary Create Site
     * @param {SiteCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async createSiteSitesPost(body: SiteCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteRead>> {
        return SiteApiFp(this.configuration).createSiteSitesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Site Language
     * @param {number} siteLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return SiteApiFp(this.configuration).deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Site
     * @param {number} siteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async deleteSiteSitesSiteIdDelete(siteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessResponseModel>> {
        return SiteApiFp(this.configuration).deleteSiteSitesSiteIdDelete(siteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Site Language
     * @param {number} siteLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteLanguageRead>> {
        return SiteApiFp(this.configuration).readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all SiteLanguage.
     * @summary Read Site Languages
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async readSiteLanguagesSiteLanguagesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SiteLanguageRead>>> {
        return SiteApiFp(this.configuration).readSiteLanguagesSiteLanguagesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read Site
     * @param {number} siteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async readSiteSitesSiteIdGet(siteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteRead>> {
        return SiteApiFp(this.configuration).readSiteSitesSiteIdGet(siteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Site.
     * @summary Read Sites
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async readSitesSitesGet(q?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SiteRead>>> {
        return SiteApiFp(this.configuration).readSitesSitesGet(q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Site Language
     * @param {SiteLanguageUpdate} body 
     * @param {number} siteLanguageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body: SiteLanguageUpdate, siteLanguageId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteLanguageRead>> {
        return SiteApiFp(this.configuration).updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body, siteLanguageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Site
     * @param {SiteUpdate} body 
     * @param {number} siteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public async updateSiteSitesSiteIdPatch(body: SiteUpdate, siteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SiteRead>> {
        return SiteApiFp(this.configuration).updateSiteSitesSiteIdPatch(body, siteId, options).then((request) => request(this.axios, this.basePath));
    }
}
