/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ErrorResponseModel;
import io.swagger.client.model.HTTPValidationError;
import io.swagger.client.model.PageCreate;
import io.swagger.client.model.PageLanguageCreate;
import io.swagger.client.model.PageLanguageRead;
import io.swagger.client.model.PageLanguageUpdate;
import io.swagger.client.model.PageRead;
import io.swagger.client.model.PageUpdate;
import io.swagger.client.model.SuccessResponseModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PageApi
 */
@Ignore
public class PageApiTest {

    private final PageApi api = new PageApi();

    /**
     * Create Page Language
     *
     * Create a PageLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPageLanguagePageLanguagesPostTest() throws Exception {
        PageLanguageCreate body = null;
        PageLanguageRead response = api.createPageLanguagePageLanguagesPost(body);

        // TODO: test validations
    }
    /**
     * Create Page
     *
     * Create a Page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPagePagesPostTest() throws Exception {
        PageCreate body = null;
        PageRead response = api.createPagePagesPost(body);

        // TODO: test validations
    }
    /**
     * Delete Page Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePageLanguagePageLanguagesPageLanguageIdDeleteTest() throws Exception {
        Integer pageLanguageId = null;
        SuccessResponseModel response = api.deletePageLanguagePageLanguagesPageLanguageIdDelete(pageLanguageId);

        // TODO: test validations
    }
    /**
     * Delete Page
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePagePagesPageIdDeleteTest() throws Exception {
        Integer pageId = null;
        SuccessResponseModel response = api.deletePagePagesPageIdDelete(pageId);

        // TODO: test validations
    }
    /**
     * Read Page Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readPageLanguagePageLanguagesPageLanguageIdGetTest() throws Exception {
        Integer pageLanguageId = null;
        PageLanguageRead response = api.readPageLanguagePageLanguagesPageLanguageIdGet(pageLanguageId);

        // TODO: test validations
    }
    /**
     * Read Page Languages
     *
     * Get all PageLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readPageLanguagesPageLanguagesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<PageLanguageRead> response = api.readPageLanguagesPageLanguagesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Read Page
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readPagePagesPageIdGetTest() throws Exception {
        Integer pageId = null;
        PageRead response = api.readPagePagesPageIdGet(pageId);

        // TODO: test validations
    }
    /**
     * Read Pages
     *
     * Get all Page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readPagesPagesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<PageRead> response = api.readPagesPagesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Update Page Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePageLanguagePageLanguagesPageLanguageIdPatchTest() throws Exception {
        PageLanguageUpdate body = null;
        Integer pageLanguageId = null;
        PageLanguageRead response = api.updatePageLanguagePageLanguagesPageLanguageIdPatch(body, pageLanguageId);

        // TODO: test validations
    }
    /**
     * Update Page
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePagePagesPageIdPatchTest() throws Exception {
        PageUpdate body = null;
        Integer pageId = null;
        PageRead response = api.updatePagePagesPageIdPatch(body, pageId);

        // TODO: test validations
    }
}
