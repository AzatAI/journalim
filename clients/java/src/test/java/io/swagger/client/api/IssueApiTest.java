/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ErrorResponseModel;
import io.swagger.client.model.HTTPValidationError;
import io.swagger.client.model.IssueCreate;
import io.swagger.client.model.IssueLanguageCreate;
import io.swagger.client.model.IssueLanguageRead;
import io.swagger.client.model.IssueLanguageUpdate;
import io.swagger.client.model.IssueRead;
import io.swagger.client.model.IssueUpdate;
import io.swagger.client.model.SuccessResponseModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for IssueApi
 */
@Ignore
public class IssueApiTest {

    private final IssueApi api = new IssueApi();

    /**
     * Create Issue
     *
     * Create an Issue.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIssueIssuesPostTest() throws Exception {
        IssueCreate body = null;
        IssueRead response = api.createIssueIssuesPost(body);

        // TODO: test validations
    }
    /**
     * Create Issue Language
     *
     * Create a IssueLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIssueLanguageIssueLanguagesPostTest() throws Exception {
        IssueLanguageCreate body = null;
        IssueLanguageRead response = api.createIssueLanguageIssueLanguagesPost(body);

        // TODO: test validations
    }
    /**
     * Delete Issue
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteIssueIssuesIssueIdDeleteTest() throws Exception {
        Integer issueId = null;
        SuccessResponseModel response = api.deleteIssueIssuesIssueIdDelete(issueId);

        // TODO: test validations
    }
    /**
     * Delete Issue Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteIssueLanguageIssueLanguagesIssueLanguageIdDeleteTest() throws Exception {
        Integer issueLanguageId = null;
        SuccessResponseModel response = api.deleteIssueLanguageIssueLanguagesIssueLanguageIdDelete(issueLanguageId);

        // TODO: test validations
    }
    /**
     * Read Issue
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readIssueIssuesIssueIdGetTest() throws Exception {
        Integer issueId = null;
        IssueRead response = api.readIssueIssuesIssueIdGet(issueId);

        // TODO: test validations
    }
    /**
     * Read Issue Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readIssueLanguageIssueLanguagesIssueLanguageIdGetTest() throws Exception {
        Integer issueLanguageId = null;
        IssueLanguageRead response = api.readIssueLanguageIssueLanguagesIssueLanguageIdGet(issueLanguageId);

        // TODO: test validations
    }
    /**
     * Read Issue Languages
     *
     * Get all IssueLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readIssueLanguagesIssueLanguagesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<IssueLanguageRead> response = api.readIssueLanguagesIssueLanguagesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Read Issues
     *
     * Get all Issue.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readIssuesIssuesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<IssueRead> response = api.readIssuesIssuesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Update Issue
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateIssueIssuesIssueIdPatchTest() throws Exception {
        IssueUpdate body = null;
        Integer issueId = null;
        IssueRead response = api.updateIssueIssuesIssueIdPatch(body, issueId);

        // TODO: test validations
    }
    /**
     * Update Issue Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateIssueLanguageIssueLanguagesIssueLanguageIdPatchTest() throws Exception {
        IssueLanguageUpdate body = null;
        Integer issueLanguageId = null;
        IssueLanguageRead response = api.updateIssueLanguageIssueLanguagesIssueLanguageIdPatch(body, issueLanguageId);

        // TODO: test validations
    }
}
