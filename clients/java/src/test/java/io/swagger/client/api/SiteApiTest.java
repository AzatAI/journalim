/*
 * JBS Backend Service
 * Journalim Protocol Compatible Backend Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: a@azat.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ErrorResponseModel;
import io.swagger.client.model.HTTPValidationError;
import io.swagger.client.model.SiteCreate;
import io.swagger.client.model.SiteLanguageCreate;
import io.swagger.client.model.SiteLanguageRead;
import io.swagger.client.model.SiteLanguageUpdate;
import io.swagger.client.model.SiteRead;
import io.swagger.client.model.SiteUpdate;
import io.swagger.client.model.SuccessResponseModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SiteApi
 */
@Ignore
public class SiteApiTest {

    private final SiteApi api = new SiteApi();

    /**
     * Create Site Language
     *
     * Create a SiteLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteLanguageSiteLanguagesPostTest() throws Exception {
        SiteLanguageCreate body = null;
        SiteLanguageRead response = api.createSiteLanguageSiteLanguagesPost(body);

        // TODO: test validations
    }
    /**
     * Create Site
     *
     * Create a Site.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteSitesPostTest() throws Exception {
        SiteCreate body = null;
        SiteRead response = api.createSiteSitesPost(body);

        // TODO: test validations
    }
    /**
     * Delete Site Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteLanguageSiteLanguagesSiteLanguageIdDeleteTest() throws Exception {
        Integer siteLanguageId = null;
        SuccessResponseModel response = api.deleteSiteLanguageSiteLanguagesSiteLanguageIdDelete(siteLanguageId);

        // TODO: test validations
    }
    /**
     * Delete Site
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteSitesSiteIdDeleteTest() throws Exception {
        Integer siteId = null;
        SuccessResponseModel response = api.deleteSiteSitesSiteIdDelete(siteId);

        // TODO: test validations
    }
    /**
     * Read Site Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readSiteLanguageSiteLanguagesSiteLanguageIdGetTest() throws Exception {
        Integer siteLanguageId = null;
        SiteLanguageRead response = api.readSiteLanguageSiteLanguagesSiteLanguageIdGet(siteLanguageId);

        // TODO: test validations
    }
    /**
     * Read Site Languages
     *
     * Get all SiteLanguage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readSiteLanguagesSiteLanguagesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<SiteLanguageRead> response = api.readSiteLanguagesSiteLanguagesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Read Site
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readSiteSitesSiteIdGetTest() throws Exception {
        Integer siteId = null;
        SiteRead response = api.readSiteSitesSiteIdGet(siteId);

        // TODO: test validations
    }
    /**
     * Read Sites
     *
     * Get all Site.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readSitesSitesGetTest() throws Exception {
        String q = null;
        Integer offset = null;
        Integer limit = null;
        List<SiteRead> response = api.readSitesSitesGet(q, offset, limit);

        // TODO: test validations
    }
    /**
     * Update Site Language
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteLanguageSiteLanguagesSiteLanguageIdPatchTest() throws Exception {
        SiteLanguageUpdate body = null;
        Integer siteLanguageId = null;
        SiteLanguageRead response = api.updateSiteLanguageSiteLanguagesSiteLanguageIdPatch(body, siteLanguageId);

        // TODO: test validations
    }
    /**
     * Update Site
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteSitesSiteIdPatchTest() throws Exception {
        SiteUpdate body = null;
        Integer siteId = null;
        SiteRead response = api.updateSiteSitesSiteIdPatch(body, siteId);

        // TODO: test validations
    }
}
