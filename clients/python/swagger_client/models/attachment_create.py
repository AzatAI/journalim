# coding: utf-8

"""
    JBS Backend Service

    Journalim Protocol Compatible Backend Service  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: a@azat.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'path': 'str',
        'content_type': 'str',
        'description': 'str',
        'access_url': 'str',
        'access_type': 'str',
        'issue_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'content_type': 'content_type',
        'description': 'description',
        'access_url': 'access_url',
        'access_type': 'access_type',
        'issue_id': 'issue_id'
    }

    def __init__(self, name=None, path=None, content_type=None, description=None, access_url=None, access_type=None, issue_id=None):  # noqa: E501
        """AttachmentCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._path = None
        self._content_type = None
        self._description = None
        self._access_url = None
        self._access_type = None
        self._issue_id = None
        self.discriminator = None
        self.name = name
        self.path = path
        self.content_type = content_type
        if description is not None:
            self.description = description
        if access_url is not None:
            self.access_url = access_url
        if access_type is not None:
            self.access_type = access_type
        if issue_id is not None:
            self.issue_id = issue_id

    @property
    def name(self):
        """Gets the name of this AttachmentCreate.  # noqa: E501


        :return: The name of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentCreate.


        :param name: The name of this AttachmentCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this AttachmentCreate.  # noqa: E501


        :return: The path of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AttachmentCreate.


        :param path: The path of this AttachmentCreate.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentCreate.  # noqa: E501


        :return: The content_type of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentCreate.


        :param content_type: The content_type of this AttachmentCreate.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this AttachmentCreate.  # noqa: E501


        :return: The description of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttachmentCreate.


        :param description: The description of this AttachmentCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def access_url(self):
        """Gets the access_url of this AttachmentCreate.  # noqa: E501


        :return: The access_url of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this AttachmentCreate.


        :param access_url: The access_url of this AttachmentCreate.  # noqa: E501
        :type: str
        """

        self._access_url = access_url

    @property
    def access_type(self):
        """Gets the access_type of this AttachmentCreate.  # noqa: E501


        :return: The access_type of this AttachmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this AttachmentCreate.


        :param access_type: The access_type of this AttachmentCreate.  # noqa: E501
        :type: str
        """

        self._access_type = access_type

    @property
    def issue_id(self):
        """Gets the issue_id of this AttachmentCreate.  # noqa: E501


        :return: The issue_id of this AttachmentCreate.  # noqa: E501
        :rtype: int
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this AttachmentCreate.


        :param issue_id: The issue_id of this AttachmentCreate.  # noqa: E501
        :type: int
        """

        self._issue_id = issue_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
