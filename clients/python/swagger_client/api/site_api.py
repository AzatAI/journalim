# coding: utf-8

"""
    JBS Backend Service

    Journalim Protocol Compatible Backend Service  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: a@azat.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SiteApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_site_language_site_languages_post(self, body, **kwargs):  # noqa: E501
        """Create Site Language  # noqa: E501

        Create a SiteLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_language_site_languages_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteLanguageCreate body: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_site_language_site_languages_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_site_language_site_languages_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_site_language_site_languages_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Site Language  # noqa: E501

        Create a SiteLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_language_site_languages_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteLanguageCreate body: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site_language_site_languages_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_site_language_site_languages_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/site_languages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_site_sites_post(self, body, **kwargs):  # noqa: E501
        """Create Site  # noqa: E501

        Create a Site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_sites_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteCreate body: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_site_sites_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_site_sites_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_site_sites_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Site  # noqa: E501

        Create a Site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_sites_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteCreate body: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site_sites_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_site_sites_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_language_site_languages_site_language_id_delete(self, site_language_id, **kwargs):  # noqa: E501
        """Delete Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_language_site_languages_site_language_id_delete(site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_language_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_site_language_site_languages_site_language_id_delete_with_http_info(site_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_site_language_site_languages_site_language_id_delete_with_http_info(site_language_id, **kwargs)  # noqa: E501
            return data

    def delete_site_language_site_languages_site_language_id_delete_with_http_info(self, site_language_id, **kwargs):  # noqa: E501
        """Delete Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_language_site_languages_site_language_id_delete_with_http_info(site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_language_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_language_site_languages_site_language_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_language_id' is set
        if ('site_language_id' not in params or
                params['site_language_id'] is None):
            raise ValueError("Missing the required parameter `site_language_id` when calling `delete_site_language_site_languages_site_language_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_language_id' in params:
            path_params['site_language_id'] = params['site_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/site_languages/{site_language_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_sites_site_id_delete(self, site_id, **kwargs):  # noqa: E501
        """Delete Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_sites_site_id_delete(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_site_sites_site_id_delete_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_site_sites_site_id_delete_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def delete_site_sites_site_id_delete_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Delete Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_sites_site_id_delete_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_sites_site_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_site_sites_site_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_site_language_site_languages_site_language_id_get(self, site_language_id, **kwargs):  # noqa: E501
        """Read Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_language_site_languages_site_language_id_get(site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_language_id: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_site_language_site_languages_site_language_id_get_with_http_info(site_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_site_language_site_languages_site_language_id_get_with_http_info(site_language_id, **kwargs)  # noqa: E501
            return data

    def read_site_language_site_languages_site_language_id_get_with_http_info(self, site_language_id, **kwargs):  # noqa: E501
        """Read Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_language_site_languages_site_language_id_get_with_http_info(site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_language_id: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_site_language_site_languages_site_language_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_language_id' is set
        if ('site_language_id' not in params or
                params['site_language_id'] is None):
            raise ValueError("Missing the required parameter `site_language_id` when calling `read_site_language_site_languages_site_language_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_language_id' in params:
            path_params['site_language_id'] = params['site_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/site_languages/{site_language_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_site_languages_site_languages_get(self, **kwargs):  # noqa: E501
        """Read Site Languages  # noqa: E501

        Get all SiteLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_languages_site_languages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[SiteLanguageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_site_languages_site_languages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_site_languages_site_languages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_site_languages_site_languages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Read Site Languages  # noqa: E501

        Get all SiteLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_languages_site_languages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[SiteLanguageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_site_languages_site_languages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/site_languages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteLanguageRead]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_site_sites_site_id_get(self, site_id, **kwargs):  # noqa: E501
        """Read Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_sites_site_id_get(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_site_sites_site_id_get_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_site_sites_site_id_get_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def read_site_sites_site_id_get_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Read Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_site_sites_site_id_get_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_site_sites_site_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `read_site_sites_site_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_sites_sites_get(self, **kwargs):  # noqa: E501
        """Read Sites  # noqa: E501

        Get all Site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_sites_sites_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[SiteRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_sites_sites_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_sites_sites_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_sites_sites_get_with_http_info(self, **kwargs):  # noqa: E501
        """Read Sites  # noqa: E501

        Get all Site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_sites_sites_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[SiteRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_sites_sites_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteRead]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_language_site_languages_site_language_id_patch(self, body, site_language_id, **kwargs):  # noqa: E501
        """Update Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_language_site_languages_site_language_id_patch(body, site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteLanguageUpdate body: (required)
        :param int site_language_id: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_language_site_languages_site_language_id_patch_with_http_info(body, site_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_language_site_languages_site_language_id_patch_with_http_info(body, site_language_id, **kwargs)  # noqa: E501
            return data

    def update_site_language_site_languages_site_language_id_patch_with_http_info(self, body, site_language_id, **kwargs):  # noqa: E501
        """Update Site Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_language_site_languages_site_language_id_patch_with_http_info(body, site_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteLanguageUpdate body: (required)
        :param int site_language_id: (required)
        :return: SiteLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_language_site_languages_site_language_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_site_language_site_languages_site_language_id_patch`")  # noqa: E501
        # verify the required parameter 'site_language_id' is set
        if ('site_language_id' not in params or
                params['site_language_id'] is None):
            raise ValueError("Missing the required parameter `site_language_id` when calling `update_site_language_site_languages_site_language_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_language_id' in params:
            path_params['site_language_id'] = params['site_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/site_languages/{site_language_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_sites_site_id_patch(self, body, site_id, **kwargs):  # noqa: E501
        """Update Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_sites_site_id_patch(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteUpdate body: (required)
        :param int site_id: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_sites_site_id_patch_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_sites_site_id_patch_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def update_site_sites_site_id_patch_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Update Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_sites_site_id_patch_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteUpdate body: (required)
        :param int site_id: (required)
        :return: SiteRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_sites_site_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_site_sites_site_id_patch`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site_sites_site_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
