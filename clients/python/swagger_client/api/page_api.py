# coding: utf-8

"""
    JBS Backend Service

    Journalim Protocol Compatible Backend Service  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: a@azat.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_page_language_page_languages_post(self, body, **kwargs):  # noqa: E501
        """Create Page Language  # noqa: E501

        Create a PageLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_page_language_page_languages_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageLanguageCreate body: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_page_language_page_languages_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_page_language_page_languages_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_page_language_page_languages_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Page Language  # noqa: E501

        Create a PageLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_page_language_page_languages_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageLanguageCreate body: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_page_language_page_languages_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_page_language_page_languages_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/page_languages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_page_pages_post(self, body, **kwargs):  # noqa: E501
        """Create Page  # noqa: E501

        Create a Page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_page_pages_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageCreate body: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_page_pages_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_page_pages_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_page_pages_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Page  # noqa: E501

        Create a Page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_page_pages_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageCreate body: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_page_pages_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_page_pages_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/pages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_language_page_languages_page_language_id_delete(self, page_language_id, **kwargs):  # noqa: E501
        """Delete Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_language_page_languages_page_language_id_delete(page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_language_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_language_page_languages_page_language_id_delete_with_http_info(page_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_language_page_languages_page_language_id_delete_with_http_info(page_language_id, **kwargs)  # noqa: E501
            return data

    def delete_page_language_page_languages_page_language_id_delete_with_http_info(self, page_language_id, **kwargs):  # noqa: E501
        """Delete Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_language_page_languages_page_language_id_delete_with_http_info(page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_language_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_language_page_languages_page_language_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_language_id' is set
        if ('page_language_id' not in params or
                params['page_language_id'] is None):
            raise ValueError("Missing the required parameter `page_language_id` when calling `delete_page_language_page_languages_page_language_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_language_id' in params:
            path_params['page_language_id'] = params['page_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/page_languages/{page_language_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_pages_page_id_delete(self, page_id, **kwargs):  # noqa: E501
        """Delete Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_pages_page_id_delete(page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_pages_page_id_delete_with_http_info(page_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_pages_page_id_delete_with_http_info(page_id, **kwargs)  # noqa: E501
            return data

    def delete_page_pages_page_id_delete_with_http_info(self, page_id, **kwargs):  # noqa: E501
        """Delete Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_pages_page_id_delete_with_http_info(page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_pages_page_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `delete_page_pages_page_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in params:
            path_params['page_id'] = params['page_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_page_language_page_languages_page_language_id_get(self, page_language_id, **kwargs):  # noqa: E501
        """Read Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_language_page_languages_page_language_id_get(page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_language_id: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_page_language_page_languages_page_language_id_get_with_http_info(page_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_page_language_page_languages_page_language_id_get_with_http_info(page_language_id, **kwargs)  # noqa: E501
            return data

    def read_page_language_page_languages_page_language_id_get_with_http_info(self, page_language_id, **kwargs):  # noqa: E501
        """Read Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_language_page_languages_page_language_id_get_with_http_info(page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_language_id: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_page_language_page_languages_page_language_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_language_id' is set
        if ('page_language_id' not in params or
                params['page_language_id'] is None):
            raise ValueError("Missing the required parameter `page_language_id` when calling `read_page_language_page_languages_page_language_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_language_id' in params:
            path_params['page_language_id'] = params['page_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/page_languages/{page_language_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_page_languages_page_languages_get(self, **kwargs):  # noqa: E501
        """Read Page Languages  # noqa: E501

        Get all PageLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_languages_page_languages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[PageLanguageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_page_languages_page_languages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_page_languages_page_languages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_page_languages_page_languages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Read Page Languages  # noqa: E501

        Get all PageLanguage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_languages_page_languages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[PageLanguageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_page_languages_page_languages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/page_languages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PageLanguageRead]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_page_pages_page_id_get(self, page_id, **kwargs):  # noqa: E501
        """Read Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_pages_page_id_get(page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_page_pages_page_id_get_with_http_info(page_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_page_pages_page_id_get_with_http_info(page_id, **kwargs)  # noqa: E501
            return data

    def read_page_pages_page_id_get_with_http_info(self, page_id, **kwargs):  # noqa: E501
        """Read Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_page_pages_page_id_get_with_http_info(page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_id: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_page_pages_page_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `read_page_pages_page_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in params:
            path_params['page_id'] = params['page_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_pages_pages_get(self, **kwargs):  # noqa: E501
        """Read Pages  # noqa: E501

        Get all Page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_pages_pages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[PageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_pages_pages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_pages_pages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_pages_pages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Read Pages  # noqa: E501

        Get all Page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_pages_pages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param int offset:
        :param int limit:
        :return: list[PageRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_pages_pages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PageRead]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_page_language_page_languages_page_language_id_patch(self, body, page_language_id, **kwargs):  # noqa: E501
        """Update Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_language_page_languages_page_language_id_patch(body, page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageLanguageUpdate body: (required)
        :param int page_language_id: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_page_language_page_languages_page_language_id_patch_with_http_info(body, page_language_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_page_language_page_languages_page_language_id_patch_with_http_info(body, page_language_id, **kwargs)  # noqa: E501
            return data

    def update_page_language_page_languages_page_language_id_patch_with_http_info(self, body, page_language_id, **kwargs):  # noqa: E501
        """Update Page Language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_language_page_languages_page_language_id_patch_with_http_info(body, page_language_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageLanguageUpdate body: (required)
        :param int page_language_id: (required)
        :return: PageLanguageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'page_language_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_page_language_page_languages_page_language_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_page_language_page_languages_page_language_id_patch`")  # noqa: E501
        # verify the required parameter 'page_language_id' is set
        if ('page_language_id' not in params or
                params['page_language_id'] is None):
            raise ValueError("Missing the required parameter `page_language_id` when calling `update_page_language_page_languages_page_language_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_language_id' in params:
            path_params['page_language_id'] = params['page_language_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/page_languages/{page_language_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageLanguageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_page_pages_page_id_patch(self, body, page_id, **kwargs):  # noqa: E501
        """Update Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_pages_page_id_patch(body, page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageUpdate body: (required)
        :param int page_id: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_page_pages_page_id_patch_with_http_info(body, page_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_page_pages_page_id_patch_with_http_info(body, page_id, **kwargs)  # noqa: E501
            return data

    def update_page_pages_page_id_patch_with_http_info(self, body, page_id, **kwargs):  # noqa: E501
        """Update Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_pages_page_id_patch_with_http_info(body, page_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageUpdate body: (required)
        :param int page_id: (required)
        :return: PageRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'page_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_page_pages_page_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_page_pages_page_id_patch`")  # noqa: E501
        # verify the required parameter 'page_id' is set
        if ('page_id' not in params or
                params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `update_page_pages_page_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in params:
            path_params['page_id'] = params['page_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
